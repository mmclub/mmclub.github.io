<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[南京邮电大学移动互联网俱乐部]]></title>
  <link href="http://mmclub.github.io/atom.xml" rel="self"/>
  <link href="http://mmclub.github.io/"/>
  <updated>2014-03-30T16:51:10+08:00</updated>
  <id>http://mmclub.github.io/</id>
  <author>
    <name><![CDATA[MMClub]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[参加搜狐比赛有感]]></title>
    <link href="http://mmclub.github.io/blog/2014/03/30/think-of-sohu-competition/"/>
    <updated>2014-03-30T11:12:39+08:00</updated>
    <id>http://mmclub.github.io/blog/2014/03/30/think-of-sohu-competition</id>
    <content type="html"><![CDATA[<p>作者：苏东生</p>

<p>去年的11月，搜狐公司举办了2014“比武招新”比赛，比赛主要分三个环节：“夺”宝典、“闯”奇关、“攻”擂台，最终优胜者将获得现金大奖和实习offer的奖励。上个学期我和两个老乡一起参加了比赛并且最后拿到了比赛的一等奖，我们自己都有些预想不到，本来只是抱着尝试的态度参加比赛而已。好吧，长话短说，现在跟大家分享一下我参加这次比赛的一些经验和收获吧。</p>

<p>首先是“夺”宝典环节，比较简单，其实也可以算做是一次海选，这个只要你用心按照它的程序去做就能过关，没什么好说的，主要就是让你了解搜狐公司的一些历史和这次比赛的详细情况。</p>

<p>接下来是“闯”奇关环节，也就是所谓的初赛了。初赛的内容有3种选择：一是针对搜狐新闻客户端（android和ios）的产品优化方案，二是搜狐视频客户端的产品优化方案，三是pc端搜狗浏览器的产品优化方案。我们选择的是做搜狐新闻客户端的优化方案，其实当时之前我都没用过android的搜狐新闻客户端，有点坑爹的赶脚，只好临时抱佛脚，把所有的新闻客户端都下了下来仔细的玩了个遍，从各个新闻客户端的特点，优缺点等方面分析，这样我们就开始了有了取长补短的一些观点。接着我们又从它的价值观定位等角度出发考虑提出建立以优质内容为主的新闻客户端生态圈，针对订阅的大板块的优化，提出了深度报道的观点深入挖掘新闻的价值。当然这只是一方面，既然是写优化方案，我们肯定是要考虑得更加长远，所以我们当时从它的发展趋势角度考虑创新性地提出加入SNS化因素，并做了一大堆细节上的考虑，包括流程，图片等。当然说了这么多杂七杂八的东西，也不能就只是一个凭空的想象，要考虑实现你自己观点的技术难度等问题，这就是做为技术人员的我该干的事了。最后总结一下比赛的心得，我认为主要是以下两方面：1.细节 2.创新</p>

<p>说了那么多理论上的东西，你要让别人如何信服你的观点呢，凭什么你的方案就比别人好。并不是你觉得可行它就可行的，没有点群众的基础怎么能行得通呢。所以接下来就是实际行动的时候了，我们做了一份调查问卷并且跑到教学楼大教室收集了200份样本，统计数据并且分析结果。</p>

<p>最后就是最为关键的“攻”擂台环节了，比赛地点也转移到了杭州的浙江大学，队伍到这里也只剩下了4支，除了我们之外的另外3支都是浙大本校的研究生。只有我们是大老远跑过来的本科生，听着这名头都有点惊呆了，压力山大啊。。现场决赛主要有这么几个环节，小牛试刀，即4组同学做各自方案的展示，为了更直观展示我们的观点，我们在最后还做了一个小品类的场景呈现。接着的搜狐论剑，4组队伍两两PK，找出对方方案中的漏洞，感觉有点像辩论赛啊（自信很重要）。。。最后就是评委拿奖的事了。</p>

<p>回想一下这次的比赛，之所以能拿到一等奖，最后经理也点评了，我们在提出任何一个观点的时候，都下足了功夫，做足了功课，并不会说就只是一个口头上的想象而已。正所谓知己知彼，百战百胜。我们有一个观点是增加一个本地新闻栏目，正好经理说在下一个版本里已经加入这个模块了，加上我们有他们其他三个队伍没有的东西，那就是调查问卷，所以就显得更有说服力了。（虽然这更多只是一种形式上的东西，毕竟我们的调查问卷基本都是针对学生，而且有挺多人都是随便写的，很有局限性）但对于比赛来说，这就是经理看中的地方，也是我们最终胜出的一个地方。</p>

<p>所以，做什么事情都不要只是想想或者是口头上说说而已，更多的是要你的实际行动，需要你做足准备，知己知彼，才能百战百胜。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to Install Ruby on Rails on CentOS 6.5 Using Rbenv]]></title>
    <link href="http://mmclub.github.io/blog/2014/03/30/install-ruby-on-rails-on-centos/"/>
    <updated>2014-03-30T11:11:37+08:00</updated>
    <id>http://mmclub.github.io/blog/2014/03/30/install-ruby-on-rails-on-centos</id>
    <content type="html"><![CDATA[<h2>Introduction</h2>

<h3>Ruby on Rails</h3>

<p>Ruby on Rails is one of the most popular web development framework, it&rsquo;s build upon  Ruby Programming Language, and it&rsquo;s the hottest web development stack currently.</p>

<h3>Rbenv</h3>

<p><a href="https://github.com/sstephenson/rbenv">Rbenv</a> is a shell script tools created by <a href="http://sstephenson.us/">Sam Stephenson</a>. It&rsquo;s used for groom your app’s Ruby environment.Use rbenv can pick a Ruby version for your application and guarantee that your development environment matches production.</p>

<p>rbenv works by inserting a directory of shims at the front of your PATH:</p>

<pre><code> ~/.rbenv/shims:/usr/local/bin:/usr/bin:/bin
</code></pre>

<p>Through a process called rehashing, rbenv maintains shims in that directory to match every Ruby command across every installed version of Ruby—irb, gem, rake, rails, ruby, and so on.</p>

<h3>CentOS</h3>

<p>CentOS is derived from  Red Hat Enterprise Linux. The target users of these distributions are usually businesses, which require their systems to be running the most stable way for a long time.So we are going to use  CentOS 6.5 running our applications.</p>

<h2>Step One &ndash; Install dependencies</h2>

<p>Before, installing any package, it&rsquo;s always recommended to update package repository cache use yum.</p>

<pre><code> sudo yum update
</code></pre>

<p>Now,in order to get necessary development tools and dependencies, run the following:</p>

<pre><code> sudo yum groupinstall -y 'development tools'
 sudo yum install -y gcc-c++ glibc-headers openssl-devel readline libyaml-devel readline-devel zlib zlib-devel  sqlite-devel  
</code></pre>

<h2>Step Two &ndash; Install Rbenv and ruby-build</h2>

<p>Then we are ready to get Rbenv downloaded installed, run the following to check out rbenv into ~/.rbenv:</p>

<pre><code> git clone git://github.com/sstephenson/rbenv.git ~/.rbenv
</code></pre>

<p>Add ~/.rbenv/bin to your $PATH for access to the rbenv command-line utility:</p>

<pre><code> echo 'export PATH="$HOME/.rbenv/bin:$PATH"' &gt;&gt; ~/.bash_profile
</code></pre>

<p>Add rbenv init to your shell to enable rbenv shims and autocompletion.</p>

<pre><code> echo 'eval "$(rbenv init -)"' &gt;&gt; ~/.bash_profile
</code></pre>

<p>Ruby-build is a Rbenv plugin which provides the rbenv install command that simplifies the process of installing new Ruby versions. Install rbenv-build:</p>

<pre><code> git clone https://github.com/sstephenson/ruby-build.git ~/.rbenv/plugins/ruby-build
</code></pre>

<p>reloaded your bash_profile to enable rbenv command:</p>

<pre><code> source ~/.bash_profile
</code></pre>

<h2>Step Three &ndash; Install Ruby</h2>

<p>Install Ruby 2.1.0 and make it the default</p>

<pre><code> rbenv install 2.1.0
 rbenv rehash
 rbenv global 2.1.0
</code></pre>

<p>Now you can run:</p>

<pre><code> ruby -v
</code></pre>

<p>to verify your ruby environment has been installed successful。 It will output something like this:</p>

<pre><code> ruby 2.1.0p0 (2013-12-25 revision 44422) [x86_64-linux]
</code></pre>

<h2>Step Four &ndash; Install Nodejs</h2>

<p>Ruby on Rails need a JavaScript runtime support. It use <a href="https://github.com/sstephenson/execjs">execjs</a> gem which can automatically picks the best runtime available to evaluate your JavaScript program, then returns the result to you as a Ruby object.</p>

<p>ExecJS supports these runtimes:</p>

<ul>
<li>therubyracer &ndash; Google V8 embedded within Ruby</li>
<li>therubyrhino &ndash; Mozilla Rhino embedded within JRuby</li>
<li>Node.js</li>
<li>Apple JavaScriptCore &ndash; Included with Mac OS X</li>
<li>Microsoft Windows Script Host (JScript)</li>
</ul>


<p>So we can use therubyracer gem or  Node.js in with our CentOS and MRI Ruby. In this guide we use <a href="http://nodejs.org/">Nodejs</a> as JavaScript runtime.</p>

<p>Node.js is available from the <a href="https://fedoraproject.org/wiki/EPEL">Fedora Extra Packages for Enterprise Linux (EPEL)</a> repository.</p>

<p>Extra Packages for Enterprise Linux (or EPEL) is a Fedora Special Interest Group that creates, maintains, and manages a high quality set of additional packages for Enterprise Linux, including, but not limited to, Red Hat Enterprise Linux (RHEL), CentOS and Scientific Linux (SL), Oracle Enterprise Linux(OEL).</p>

<p>To check if you have EPEL, run</p>

<pre><code> yum repolist
</code></pre>

<p>if you don&rsquo;t see epel, install it via RPM</p>

<pre><code> rpm -Uvh http://download-i2.fedoraproject.org/pub/epel/6/i386/epel-release-6-8.noarch.rpm
</code></pre>

<p>And then run the following command to install node:</p>

<pre><code> sudo yum install nodejs --enablerepo=epel
</code></pre>

<h2>Step Four &ndash; Install Rails Gem and test it.</h2>

<p> Rails 4.0 needs RubyGems 2.0.3, so you have to update your system by using following command</p>

<pre><code> gem update --system 2.0.3
</code></pre>

<p>Now, you can install the rails gem</p>

<pre><code> gem install rails
 rbenv rehash
</code></pre>

<p>Test your rails:</p>

<pre><code> rails new projectname
 cd projectname
 rails server
</code></pre>

<p>now open your browser and open <a href="http://your-server-ip:3000,you">http://your-server-ip:3000,you</a> can find the rails project default page.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Puma: 一个为并发构建的Ruby服务器]]></title>
    <link href="http://mmclub.github.io/blog/2014/03/03/puma-a-ruby-web-server-for-concurrent/"/>
    <updated>2014-03-03T19:14:42+08:00</updated>
    <id>http://mmclub.github.io/blog/2014/03/03/puma-a-ruby-web-server-for-concurrent</id>
    <content type="html"><![CDATA[<p>本文翻译自Puma官方文档，同时发布于<a href="https://github.com/oa414/puma/blob/master/README.zh.md">Github</a></p>

<p>译者：林翔宇</p>

<h2>概述</h2>

<p>Puma是一个简单，快速，基于线程，并且高并发的面向Ruby/Rack程序的 HTTP 1.1 服务器。Puma同时面向开发和产品环境。为了达到最高的效率，推荐使用一个实现了真正线程的Ruby实现，比如Rubinius或者JRuby。</p>

<h2>为速度和并发构建。</h2>

<p>Puma是一个简单，快速，基于线程，并且高并发的面向Ruby/Rack程序的 HTTP 1.1 服务器。它可以用于任何支持Rack的程序，可以取代Webrick或者Mongrel。它是为了<a href="http://rubini.us">Rubinius</a>而设计的服务器，但是同样可以工作在JRuby和MRI下。Puma同时面向开发和产品环境。</p>

<p>Puam使用了一个继承自Mongrel的C优化的Ragel扩展，来快速并且精确地解析HTTP1.1请求（并且便于移植）。之后，Puma将这些请求放到一个你可以控制的内部线程池的线程之中，所以Puma为你的web应用提供了一个真实的并发环境。</p>

<p>在 Rubinius2.0 中，Puma会用真实的线程利用你所有的CPU核心，这意味着你不用使用多个进程来增加吞吐量。你可以看到在JRuby上类似的优点。</p>

<p>在 MRI中, 因为有全局解释器锁的存在（GIL），同时只能有一个真实的线程在运行。但是当你在做许多IO阻塞的事情的时候（比如HTTP调用像 Twitter的外部API的时候），Puma仍然会通过运行并发运行阻塞的IO调用增加MRI的吞吐量。（ 基于 EventMachine的服务器，如Thin会关掉这个功能，要求你只能使用特别的库）。每个人的选择因实际的应用而异。为了达到最大的吞吐量，强烈推荐使用一个实现了真实线程的Ruby实现，比如<a href="http://rubini.us">Rubinius</a> 或者 <a href="http://jruby.org">JRuby</a>。</p>

<h2>快速入门</h2>

<p>最简单的使用Puma的方式是使用 RubyGems:</p>

<pre><code>$ gem install puma
</code></pre>

<p>现在<code>puma</code>命令已经加入到你的环境变量里了，在你的应用程序根目录下运行下面命令启动你的Rack应用:</p>

<pre><code>$ puma app.ru
</code></pre>

<h2>高级步骤</h2>

<h3>Sinatra</h3>

<p>你可以用下面的命令用Puma运行你的Sinatra应用</p>

<pre><code>$ ruby app.rb -s Puma
</code></pre>

<p>或者在你的应用中设置总是使用Puma</p>

<pre><code>require 'sinatra'
configure { set :server, :puma }
</code></pre>

<p>如果你使用 Bundler,确保你把Puma加入了你的Gemfile中(步骤见下面)。</p>

<h3>Rails</h3>

<p>首先，确保你把Puma加入了你的Gemfile中。</p>

<pre><code>gem 'puma'
</code></pre>

<p>然后用Rails命令启动Puma</p>

<pre><code>$ rails s Puma
</code></pre>

<h3>Rackup</h3>

<p>你可以把Puma作为<code>rackup</code>的选项。</p>

<pre><code>$ rackup -s Puma
</code></pre>

<p>你可以改变你的 <code>config.ru</code> 来默认选择Puma服务器，加入下面的这行:</p>

<pre><code>#\ -s puma
</code></pre>

<h2>配置</h2>

<p>Puma提供了很多控制服务器器运行的选项，完整列表请查阅<code>puma -h</code> (或者 <code>puma --help</code>)</p>

<h3>线程池</h3>

<p>Puma利用了一个你可以改变的动态线程池，你可以通过<code>-t</code> (或者 <code>--threads</code>) 选项:设置最小和最大的线程池里的可以使用的线程数量</p>

<pre><code>$ puma -t 8:32
</code></pre>

<p>Puma会动态的根据当前的负载改变线程数量，默认的数量是<code>0:16</code>, 大胆的尝试吧，但是不要把最大线程数量设置的太大，这会耗尽系统资源。</p>

<h3>集群模式</h3>

<p>Puma 2 提供了集群模式 , 允许你使用 fork出来的进程处理并发处理多个请求。 你可以用-w<code>(or</code>&mdash;workers`) 参数调整运行的work进程数量。</p>

<pre><code>$ puma -t 8:32 -w 3
</code></pre>

<p>在提供真实线程的Ruby实现中，你应该把这个数字调整到和CPU核心数量相同。</p>

<p>注意集群模式下仍然是使用线程的， <code>-t</code> 选项设置每个 worker的进程数量，所以 <code>-w 2 -t 16:16</code> 可能开启了32个线程。</p>

<p>如果你在并发模式你可以选择在启动worker进程前预加载你的应用。如果想利用<a href="https://blog.heroku.com/archives/2013/3/6/matz_highlights_ruby_2_0_at_waza">MRI Ruby 2.0</a>推出的<a href="http://en.wikipedia.org/wiki/Copy-on-write">Copy on Write</a> 的优点的话，这是必要的。只需要调用的时候指定一个 <code>--preload</code> 参数:</p>

<pre><code># CLI invocation
$ puma -t 8:32 -w 3 --preload
</code></pre>

<p>如果你在使用配置文件，使用<code>preload_app!</code>方法，并且使用<code>-C</code>参数指定配置文件:</p>

<pre><code>$ puma -C config/puma.rb

# config/puma.rb
threads 8,32
workers 3
preload_app!
</code></pre>

<p>此外，你可以在配置文件里面定义一个代码块，来在每个工作线程启动的时候运行：</p>

<pre><code># config/puma.rb
on_worker_boot do
  # configuration here
end
</code></pre>

<p>这些代码可以用来在启动应用的时候初始化进程, 允许你做一些和Puma服务器有关，但是不和应用结合的事情。比如，你可以发送一个日志通知Puma启动了。</p>

<p>你可以多次增加钩子调用。</p>

<p>如果你使用ActiveRecord预加载你的应用， 推荐你在这里这样初始化你的连接池：</p>

<pre><code># config/puma.rb
on_worker_boot do
  ActiveSupport.on_load(:active_record) do
    ActiveRecord::Base.establish_connection
  end
end
</code></pre>

<h3>绑定 TCP / Sockets</h3>

<p>相比较其他需要很多配置参数的服务器，Puma仅仅通过<code>-b</code> (或者 <code>--bind</code>)选项使用一个URI参数：</p>

<pre><code>$ puma -b tcp://127.0.0.1:9292
</code></pre>

<p>想通过使用UNIX Sockets来取代TCP么（这能提高5-10%的性能），没问题！</p>

<pre><code>$ puma -b unix:///var/run/puma.sock
</code></pre>

<p>如果你需要改变Unix socket的权限，只需要加入一个umask参数：</p>

<pre><code>$ puma -b 'unix:///var/run/puma.sock?umask=0777'
</code></pre>

<p>希望更加安全？使用 SSL sockets!</p>

<pre><code>$ puma -b 'ssl://127.0.0.1:9292?key=path_to_key&amp;cert=path_to_cert'
</code></pre>

<h3>控制/状态服务</h3>

<p>Puma提供了一个内置的控制/状态服务app来提供对Puam自身的控制，这是一个打开Puma控制服务器的样例：</p>

<pre><code>$ puma --control tcp://127.0.0.1:9293 --control-token foo
</code></pre>

<p>它会在localhost的9293端口打开Puma配置服务器。此外，所有的到控制服务器的请求需要包括一个<code>token=foo</code> 作为查询参数，作为简单的认证。更多app用法参见<a href="https://github.com/puma/puma/blob/master/lib/puma/app/status.rb">status.rb</a>。</p>

<h3>配置文件</h3>

<p>你可以同时使用一个<code>-C</code> (或 <code>--config</code>) 参数提供一个哦诶之文件:</p>

<pre><code>$ puma -C /path/to/config
</code></pre>

<p>请参考 <a href="https://github.com/puma/puma/blob/master/examples/config.rb">示例配置</a> 或者查询 <a href="https://github.com/puma/puma/blob/master/lib/puma/configuration.rb">configuration.rb</a> 查看所有的配置项目</p>

<h2>重启</h2>

<p>Puma有能力在更新版本的时候重启自己，当平台允许的时候(MRI, Rubinius, JRuby),Puma 进行热重启。这是和
 <em>unicorn</em> 和 <em>nginx</em> 在重启的时候保持服务器sockets连接相同的。它可以保证重启的服务器替代旧的服务器的时候请求已经被处理。</p>

<p>Puma有2个内建的重启机制：</p>

<ul>
<li>发送<code>SIGUSR2</code> 信号到<code>puma</code> 进程</li>
<li>使用 status server 和 issue <code>/restart</code></li>
</ul>


<p>当前和重启的进程不会共享代码，所以手动停止Puma并且关闭它也是安全的。</p>

<p>如果新的进程不能加载，它会简单的退出。你应该在生产环境下用一个监控程序运行Puma。</p>

<h3>Cleanup Code</h3>

<p>Puma不能理解所有你的App使用的资源，所以它在你用<code>-C</code>提供的配置文件里面提供了一个叫<code>on_restart</code>的钩子。传递给<code>on_restart</code> 会被Puma在重启自己的时候调用。</p>

<p>你应该在这个代码块里面关闭全局日志文件，redis连接等，这样它们的文件描述符不会在重启的进程里面泄漏。否则会导致文件描述符打开太多，当服务器重启次数很多的时候会导致应用崩溃 。</p>

<h3>平台限制</h3>

<p>不同的平台有差异，下列是Puma在不同平台上有差异的地方</p>

<ul>
<li><strong>JRuby</strong>, <strong>Windows</strong>: 服务器的Socket不能被无缝重启， 这些平台不能通过Ruby传递信息到新的进程</li>
<li><strong>JRuby</strong>, <strong>Windows</strong>: 不支持集群模式 ，因为没有fork  fork(2)</li>
<li><strong>Windows</strong>: 不支持daemon mode ，因为没有fork(2)</li>
</ul>


<h2>pumactl</h2>

<p><code>pumactl</code> 是一个简单的CLI前端来控制或者查看上述的app状态。 请参考  <code>pumactl --help</code></p>

<h2>维护多个Puma  / init.d / upstart 脚本</h2>

<p>如果你想马上得到一个维护多个程序的脚本，请查看用于init.d 和 upstart脚本的<a href="https://github.com/puma/puma/tree/master/tools/jungle">tools/jungle</a></p>

<h2>Capistrano 部署</h2>

<p>Puma 已经被包括进 Capistrano <a href="https://github.com/puma/puma/blob/master/lib/puma/capistrano.rb">deploy script</a>, 你只要 require :</p>

<p>config/deploy.rb</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">require</span> <span class="s1">&#39;puma/capistrano&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>然后</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>bundle <span class="nb">exec </span>cap puma:start
</span><span class='line'><span class="nv">$ </span>bundle <span class="nb">exec </span>cap puma:restart
</span><span class='line'><span class="nv">$ </span>bundle <span class="nb">exec </span>cap puma:stop
</span><span class='line'><span class="nv">$ </span>bundle <span class="nb">exec </span>cap puma:phased_restart
</span></code></pre></td></tr></table></div></figure>


<h2>协议</h2>

<p>Puma 的版权属于Evan Phoenix 和 贡献者. 它基于BSD 协议. 详见LICENSE文件。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Android反编译入门与反编译防范]]></title>
    <link href="http://mmclub.github.io/blog/2014/03/02/decompile-in-android/"/>
    <updated>2014-03-02T22:04:22+08:00</updated>
    <id>http://mmclub.github.io/blog/2014/03/02/decompile-in-android</id>
    <content type="html"><![CDATA[<p>作者: 林翔宇</p>

<h2>反编译Java代码</h2>

<p>参考<a href="http://www.oschina.net/question/54100_33457">http://www.oschina.net/question/54100_33457</a></p>

<p>文中给出下载链接版本较老，其中dex2jar可能会出现java.lang.OutOfMemoryError的异常。请去官网下载两个工具的最新版。</p>

<ul>
<li><a href="https://code.google.com/p/dex2jar/">https://code.google.com/p/dex2jar/</a></li>
<li><a href="http://java.decompiler.free.fr/?q=jdgui">http://java.decompiler.free.fr/?q=jdgui</a></li>
</ul>


<p>简单来说，用dex2jar把apk文件解压得到的classes.dex转化为jar文件，然后用JD-GUI打开这个Jar文件，查看源码。</p>

<h2>反编译apk生成程序的源代码和图片、XML配置、语言资源等文件</h2>

<p>同样参考<a href="http://www.oschina.net/question/54100_33457">http://www.oschina.net/question/54100_33457</a></p>

<p>使用apktool <a href="https://code.google.com/p/android-apktool/">https://code.google.com/p/android-apktool/</a></p>

<h2>混淆代码防范反编译</h2>

<p>参考 <a href="http://blog.csdn.net/sunboy_2050/article/details/6727640">http://blog.csdn.net/sunboy_2050/article/details/6727640</a></p>

<p><em>2014.3.4更新，感谢俱乐部苏东生同学在评论区提醒</em></p>

<p>新版的SDK在创建工程目录的时候已经提供了默认的模板，将project.properties的中“# proguard.config=${sdk.dir}/tools/proguard/proguard-android.txt:proguard-project.txt”的“#”去掉，再做一些定制就可以了。可以参考</p>

<p><a href="http://blog.csdn.net/brokge/article/details/8989312">http://blog.csdn.net/brokge/article/details/8989312</a></p>

<p><del>修改Android项目下default.properties文件，加上一句proguard.config=proguard.cfg。</del></p>

<p><del>当然同时目录下要有proguard.cfg文件，可以在android_sdk_path/tools/proguard/目录下找</del></p>

<p><del>其实似乎现在Android默认创建工程的时候就已经有了。。看一下default.properties注释就可以了。。。</del></p>

<p><em>注意</em></p>

<p>参考<a href="http://my.oschina.net/banxi/blog/55622">http://my.oschina.net/banxi/blog/55622</a></p>

<ul>
<li>当使用了除了android-support-v4这些API的时候，要添加相对应的声明</li>
<li>可以让proguard帮我们忽略Log.d()这些语句</li>
</ul>


<h2>其他参考资料</h2>

<ul>
<li><a href="http://www.google.co.uk/search?hl=zh-CN&amp;newwindow=1&amp;site=&amp;source=hp&amp;q=Android++decomplier&amp;btnG=Google+%E6%90%9C%E7%B4%A2">Google搜索Android  decomplier</a></li>
<li><a href="http://stackoverflow.com/questions/1249973/decompiling-dex-into-java-sourcecode">StackOverFlow decompiling DEX into Java sourcecode</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Android测试入门(一) Activity测试简介]]></title>
    <link href="http://mmclub.github.io/blog/2014/03/02/android-test-1/"/>
    <updated>2014-03-02T21:54:03+08:00</updated>
    <id>http://mmclub.github.io/blog/2014/03/02/android-test-1</id>
    <content type="html"><![CDATA[<p>作者：林翔宇</p>

<h2>瞎扯</h2>

<p>什么是测试？试想大家写一个程序的时候，经常要手动在命令行下输入测试数据，然后看看程序的输出与实际一不一致。而在做App等UI事件众多的程序的时候，经常要手动点击按钮等控件，看看会不会有预期一样的反应。</p>

<p>大家每次都这样做，累不累呢～有什么好方法可以帮我们节约这些时间从而省出更多时间来约漂亮的女孩子呢～</p>

<p>当然有咯。我们再写一个程序，把这些步骤自动化就行咯。这个程序就是一个测试。</p>

<p>当然软件测试包含的东西很多，我们就来简单扯扯Android测试相关的内容，分几期做一个简单的入门介绍。</p>

<h2>简介</h2>

<p><a href="https://developer.android.com/tools/testing/index.html">Official Doc</a></p>

<p>Android SDK包含了强大的测试工具</p>

<ul>
<li>一个Android Test本身是一个Android Application，并且它的AndroidManifest.xml文件里面有它测试目标的信息</li>
<li>与一个Application不同，Android Test由多个测试用例组成，而不是Android components。</li>
<li>Android测试拥立扩展自JUnit TestCase类，并且可以在测试时发送触摸和键盘输入信息</li>
<li>根据不同的component (application, activity, content provider, or service)，你可以选择不同的Android test 基类</li>
<li>Eclipese/ADT, Intellij IDEA, Android Studio均提供了和Android Test的良好整合</li>
</ul>


<p>一个 Test Application包含了以下几种对于Activity相关的测试</p>

<ul>
<li>启动的初始化状态测试，比如测试一个UI控件是否成功实例化，会不会返回空指针。</li>
<li>UI测试，比如测试按钮点击出现的结果与预期比较一不一样</li>
<li>状态转移时候的测试，当一个Activity在Pause，Start等几个状态之间变换的时候，测试有的控件，变量。</li>
</ul>


<h2>新建一个测试</h2>

<p>在Intellij IDEA中，可以在项目文件下 File &ndash; New Module &ndash; Android Test Module来创建一个测试</p>

<p><img src="http://i.imgur.com/z5M4eF5.png" alt="Intellij New Test Module" /></p>

<p>Intellij IDEA会生成一个类似下面的程序结构</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>
</span><span class='line'>MMDailyTest
</span><span class='line'>├── AndroidManifest.xml
</span><span class='line'>├── MMDailyTest.iml
</span><span class='line'>├── ant.properties
</span><span class='line'>├── bin
</span><span class='line'>├── build.xml
</span><span class='line'>├── gen
</span><span class='line'>│   └── org
</span><span class='line'>│       └── nupter
</span><span class='line'>│           └── mmdaily
</span><span class='line'>│               └── tests
</span><span class='line'>│                   ├── BuildConfig.java
</span><span class='line'>│                   ├── Manifest.java
</span><span class='line'>│                   └── R.java
</span><span class='line'>├── libs
</span><span class='line'>├── local.properties
</span><span class='line'>├── proguard-project.txt
</span><span class='line'>├── project.properties
</span><span class='line'>├── res
</span><span class='line'>└── src
</span><span class='line'>    └── org
</span><span class='line'>        └── nupter
</span><span class='line'>            └── mmdaily
</span><span class='line'>                ├── api
</span><span class='line'>                └── ui
</span><span class='line'>                    └── ActivityListActivityTest.java
</span><span class='line'>                    </span></code></pre></td></tr></table></div></figure>


<p>和一个Android App目录基本一致</p>

<p>来看看 AndroidManifest.xml 有什么东西</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="cp">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span>
</span><span class='line'><span class="c">&lt;!-- package name must be unique so suffix with &quot;tests&quot; so package loader doesn&#39;t ignore us --&gt;</span>
</span><span class='line'><span class="nt">&lt;manifest</span> <span class="na">xmlns:android=</span><span class="s">&quot;http://schemas.android.com/apk/res/android&quot;</span>
</span><span class='line'>          <span class="na">package=</span><span class="s">&quot;org.nupter.mmdaily.tests&quot;</span>
</span><span class='line'>          <span class="na">android:versionCode=</span><span class="s">&quot;1&quot;</span>
</span><span class='line'>          <span class="na">android:versionName=</span><span class="s">&quot;1.0&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="c">&lt;!-- We add an application tag here just so that we can indicate that</span>
</span><span class='line'><span class="c">         this package needs to link against the android.test library,</span>
</span><span class='line'><span class="c">         which is needed when building test cases. --&gt;</span>
</span><span class='line'>    <span class="nt">&lt;application&gt;</span>
</span><span class='line'>        <span class="nt">&lt;uses-library</span> <span class="na">android:name=</span><span class="s">&quot;android.test.runner&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/application&gt;</span>
</span><span class='line'>    <span class="c">&lt;!--</span>
</span><span class='line'><span class="c">    This declares that this application uses the instrumentation test runner targeting</span>
</span><span class='line'><span class="c">    the package of org.nupter.mmdaily.  To run the tests use the command:</span>
</span><span class='line'><span class="c">    &quot;adb shell am instrument -w org.nupter.mmdaily.tests/android.test.InstrumentationTestRunner&quot;</span>
</span><span class='line'><span class="c">    --&gt;</span>
</span><span class='line'>    <span class="nt">&lt;instrumentation</span> <span class="na">android:name=</span><span class="s">&quot;android.test.InstrumentationTestRunner&quot;</span>
</span><span class='line'>                     <span class="na">android:targetPackage=</span><span class="s">&quot;org.nupter.mmdaily&quot;</span>
</span><span class='line'>                     <span class="na">android:label=</span><span class="s">&quot;Tests for org.nupter.mmdaily&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'><span class="nt">&lt;/manifest&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>默认生成的注释写得很清楚，相比普通的App的AndroidManifest.xml ，多了一个android:name=&ldquo;android.test.runner&#8221;的library依赖，以及一个instrumentation元素，制定了测试的对象的包。</p>

<h2>第一个测试类</h2>

<p>一个测试首先是一个继承自<code>android.test.ActivityInstrumentationTestCase2&lt;YOUR_ACTIVITY_CLASS&gt;</code> 的类</p>

<p>比如我们为ReadPageActivity创建一个ReadPageActivityTest.java</p>

<p>这个ReadPageActivity里面只有一个显示为返回的Button，我们测试按这个按钮的反应，以及这个按钮的文字是不是一直显示为Button</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kn">package</span> <span class="n">org</span><span class="o">.</span><span class="na">nupter</span><span class="o">.</span><span class="na">mmdaily</span><span class="o">.</span><span class="na">ui</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">android.app.Instrumentation</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">android.test.ActivityInstrumentationTestCase2</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">android.widget.Button</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.nupter.mmdaily.R</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm"> * Author: linxiangyu</span>
</span><span class='line'><span class="cm"> * Date:   3/2/14</span>
</span><span class='line'><span class="cm"> * Time:   3:24 AM</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">ReadPageActivityTest</span> <span class="kd">extends</span> <span class="n">ActivityInstrumentationTestCase2</span><span class="o">&lt;</span><span class="n">ReadPageActivity</span><span class="o">&gt;</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="cm">/**</span>
</span><span class='line'><span class="cm">     * 一个Android Activity的Example，是&lt;a href=&quot;https://developer.android.com/tools/testing/testing_android.html&quot;&gt;官方教程的简化版&lt;/a&gt;</span>
</span><span class='line'><span class="cm">     */</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">private</span> <span class="n">ReadPageActivity</span> <span class="n">mActivity</span><span class="o">;</span>
</span><span class='line'>    <span class="kd">private</span> <span class="n">Button</span> <span class="n">mButton</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="nf">ReadPageActivityTest</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="kd">super</span><span class="o">(</span><span class="n">ReadPageActivity</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>    <span class="c1">// 整个测试开始之前构建的初始化条件。注意这个构造函数的样子，写错了运行测试的时候这个类就不会被调用了</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setUp</span><span class="o">()</span> <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{</span>
</span><span class='line'>        <span class="kd">super</span><span class="o">.</span><span class="na">setUp</span><span class="o">();</span>       <span class="c1">// 每个TestCase开始之前都会调用，在这里初始化一些成员变量，可以避免TestCase对变量的修改的影响</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">setActivityInitialTouchMode</span><span class="o">(</span><span class="kc">false</span><span class="o">);</span> <span class="c1">//如果你的测试要触发触摸或者键盘输入，那么必须手动关闭掉Touch Mode</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">mActivity</span> <span class="o">=</span> <span class="n">getActivity</span><span class="o">();</span>    <span class="c1">// 获取activity</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">mButton</span> <span class="o">=</span> <span class="o">(</span><span class="n">Button</span><span class="o">)</span> <span class="n">mActivity</span><span class="o">.</span><span class="na">findViewById</span><span class="o">(</span>
</span><span class='line'>               <span class="n">R</span><span class="o">.</span><span class="na">id</span><span class="o">.</span><span class="na">ReadPageBack</span>
</span><span class='line'>        <span class="o">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">tearDown</span><span class="o">()</span> <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{</span>
</span><span class='line'>        <span class="kd">super</span><span class="o">.</span><span class="na">tearDown</span><span class="o">();</span>    <span class="c1">// 每个TestCase结束之后都会调用</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">testPreConditions</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">assertTrue</span><span class="o">(</span><span class="n">mButton</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span> <span class="c1">// 测试一些初始条件，比如你的UI控件不为空。</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">testBaseUI</span><span class="o">(){</span>
</span><span class='line'>        <span class="n">assertEquals</span><span class="o">(</span><span class="n">mButton</span><span class="o">.</span><span class="na">getText</span><span class="o">(),</span> <span class="s">&quot;返回&quot;</span><span class="o">);</span>
</span><span class='line'>        <span class="n">mActivity</span><span class="o">.</span><span class="na">runOnUiThread</span><span class="o">(</span>
</span><span class='line'>                <span class="k">new</span> <span class="nf">Runnable</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>                    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">run</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>                        <span class="n">mButton</span><span class="o">.</span><span class="na">requestFocus</span><span class="o">();</span>
</span><span class='line'>                        <span class="n">mButton</span><span class="o">.</span><span class="na">callOnClick</span><span class="o">();</span>
</span><span class='line'>                    <span class="o">}</span> <span class="c1">//</span>
</span><span class='line'>                <span class="o">});</span> <span class="c1">// UI控件的改变必须这样运行在一个runOnUiThread 中</span>
</span><span class='line'>
</span><span class='line'>    <span class="o">}</span>  <span class="c1">// 测试一些UI事件</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">testStatePause</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">Instrumentation</span> <span class="n">mInstr</span> <span class="o">=</span> <span class="k">this</span><span class="o">.</span><span class="na">getInstrumentation</span><span class="o">();</span>
</span><span class='line'>        <span class="n">mInstr</span><span class="o">.</span><span class="na">callActivityOnPause</span><span class="o">(</span><span class="n">mActivity</span><span class="o">);</span>
</span><span class='line'>        <span class="n">assertEquals</span><span class="o">(</span><span class="n">mButton</span><span class="o">.</span><span class="na">getText</span><span class="o">(),</span> <span class="s">&quot;返回&quot;</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span> <span class="c1">// 测试一些App状态转移的时候的样子</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>运行测试</h3>

<p><img src="http://i.imgur.com/1VWC6oS.png" alt="Run Test" /></p>

<p>你会在Intellij 下面的Run窗口里面看到相关的提示，以及你的模拟器/手机迅速跳转到相应的测试Activity，然后又返回来。</p>

<p><img src="http://i.imgur.com/oTD4PMs.png" alt="Test Result" /></p>

<p>很高兴，测试一次通过，全绿。</p>

<h3>项目代码</h3>

<p><a href="https://github.com/mmclub/MMDaily/tree/23ee19d4b25889a5a112f4f6d39e4d306fc8d82b">项目的代码</a></p>

<p>这就是一个最简单的Android测试的样例了，之后我们会介绍其他Android SDK里面测试相关的东西。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[设计之食堂有感]]></title>
    <link href="http://mmclub.github.io/blog/2014/03/02/design-in-canteen/"/>
    <updated>2014-03-02T21:53:49+08:00</updated>
    <id>http://mmclub.github.io/blog/2014/03/02/design-in-canteen</id>
    <content type="html"><![CDATA[<p>作者： 王涛</p>

<p>今天看了知乎上有一个回答<a href="www.zhihu.com/question/22153036">设计成就的关键是“勤奋”还是“天赋”</a>。</p>

<p>里面讲到，看到广告牌就能意识到其设计的好坏，这叫天生。</p>

<p>我不置可否。</p>

<blockquote><p>“设计就是沟通”。</p></blockquote>

<p>后来去食堂吃饭，点了一碗面条，发现没带手机，所以不能用手机里的电子书来利用这个碎片时间。然后我突然想起，刚刚那个的“广告牌”，于是我把注意力放在了食堂一排窗口的广告牌上，上边是统一的，也就是每家都一样，只是名称不同，然后下面都是百事可乐的广告牌，重复而已。</p>

<p>我把注意力放在了百事广告牌上，白色字体，灰色暗部，蓝色背景，从左下角呈喇叭放大的趋势，有种被喊出来的感觉。</p>

<p>接着，四个形象代言人的站位，面向镜头的姿势、表情、动作、发型和服饰，每一个要素想表达的信息无非是，party，欢乐，high。
每一个要素都是可以考究的。
瞬间就觉得自己的视野开阔了许多。</p>

<blockquote><p>设计即生活</p></blockquote>

<p>过了一会，我的面好了，我端方形铁盘，上面放着乘着面的瓷碗，店家考虑到瓷碗太大且烫手，所以用铁盘托之，有点贴心。再来，每天都在用的筷子，勺子，碗，这些我们早已习惯的日常用品，都是经过无数次”设计”过的吧？筷子的形状、长短、材质和手感，勺子的深浅、形状，碗的制作工艺，花纹等等这些随便一个方面都是蕴含无数的”设计“。甚至，面条的发明，菜丝的切法，汤料的制作，这些看似习以为常的”本该如此“或者”本该是厨师的事“其实处处都是设计。</p>

<blockquote><p>“设计就是改善”。</p></blockquote>

<p>吃完，拿出面纸，恩，这面纸的大小、手感和实用性，制作对环境的影响，太多太多了，设计师思维已经打开，收也收不住。世界经济和工业在高速发展，但高速的背后还有很多不合理，不人性，不舒适，不高效，不好用，不美观，不爽的地方，需要用心，细心，有耐心，有爱心的设计师来改善。</p>

<p>吃过饭，我还沉浸在思索当中，餐桌的宽度、桌面的材质，板凳的设计，桌椅的排布，收残车的宽度。。。。好吧，太多了。</p>

<p>出了食堂，看到门口的海报墙，一眼望去，秒秒钟把所有海报的设计水平分的清清楚楚，显然新东方和腾讯的广告海报做的相对精致，PS图层数量应该是其他劣质广告的数倍，甚至数十倍。成本和质量在一定范围内成正比。</p>

<blockquote><p>“天赋决定上限，努力决定下限”，所以，以我们现在的用心和努力程度，根本轮不上比天赋。</p></blockquote>

<p>什么样的心态，就有什么样的环境，不要埋怨现在的环境，努力让自己变强，才能在更好的环境成长，不然去了也是白去。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[互联网引发的硬件革命]]></title>
    <link href="http://mmclub.github.io/blog/2014/03/02/internet-and-hardware/"/>
    <updated>2014-03-02T21:52:21+08:00</updated>
    <id>http://mmclub.github.io/blog/2014/03/02/internet-and-hardware</id>
    <content type="html"><![CDATA[<p>谷歌glass计划横空出世令人眼前一亮，随后各种便携式智能硬件如雨后春笋般涌现出来，智能可穿戴设备已经成为下一代移动互联网的主要研究发展方向,这一切的产生，都将归功于互联网的快速发展&hellip;.</p>

<p>可穿戴设备其实在6年前曾经火过一阵子。在2005—2010年里，联发科MTK当道，一块芯片集成了MTK片上操作系统，256K内存，触摸屏驱动以及SIM解码等手机基本功能，而由此造成的后果就是没有太多的厂商愿意自己去研发新的技术，直接把MTK的授权和芯片买过来，加上电池屏幕以及一些基本的电路保障系统就制造出一台手机，以至于大陆境内山寨机泛滥，整个产业前途茫茫。穷则思变，最先在“可穿戴”上面做文章的公司叫“yami科技”，是一家台湾的大学生创业公司，推出的产品“Yami手表手机”虽然也是采用的MTK解决方案，但是把电路板和电池设计的很小，虽然较手表还是大了一些，但是也有其他的一些补全性的设计比如有一颗30万像素的摄像头可以进行暗处偷拍，也算弥补了外观的缺憾，但最终还是没能在大陆火很久，最主要的原因就是可操作性不强，太小的屏幕，用来显摆显摆，接听电话还行，但是不能满足年轻人对游戏和娱乐的追求，所以这类型的手机在不到1年的时间里就已经不能在市场见到踪影了。</p>

<p>追述可穿戴设备的根源，应该是日本科幻小说家星星一的一篇冷笑话《你还要带上它》，故事如下：“一天，A君在公交车站等车，看见一个提着沉重的箱子的神秘人不住的往自己的手表望，出于好奇，A君也探过头去看了一下，“天哪！”，那手表上显示着一间屋子，屋里还坐着个女人，A君马上便开口道：‘先生，您手上佩戴的这块手表是什么神奇的东西？’，神秘男子回答道:‘这是我研发的智能手表，它能帮我查看家里面的一切情况，帮我煮饭做菜，帮我&hellip;&hellip;’，‘天哪，世上竟然还有那么好的东西！能卖给我吗？’，A君已经迫不及待地打断道。‘当然可以，我也想出了更好的想法，只是还差点钱去做，就算你1000元吧’。A君迫不及待地掏出钱塞给神秘人，然后戴上手表准备上公交车，神秘人突然想到了什么，‘先生！等一下’，A君不情愿地转过头‘还有什么事？’，‘你还要带上它’，神秘人指了指自己那个沉重的箱子，‘这是它的电池’”。</p>

<p>小时候的确被故事里描述的这块万能的手表给迷住了，真希望某一天自己能拥有一块，直到现在才发现，原来身边的很多设备都可以实现这块手表的功能。就故事里描述，这块手表其实就是一个家庭物联网的控制终端而已，通过网络连接着家里的摄像头和电饭锅，如果失去了网络，这块手表可以说就一点用也没有了。我一直很佩服星星一，他的科幻小说就好像是预言，没错，再弱小的设备，只要连接上了网络，一样会变得威力无穷。</p>

<p>当谷歌glass计划刚宣布时，圈内的人基本上是不大看好的，因为便携设备的计算能力都很低，无法独立完成诸如语音识别这一类需要大量计算的服务，认为这又将会是一个失败的产品，重蹈yami的覆辙，但是随着网络基础建设日趋完备，高速3g，4g网络的开启，使得针对移动端的云计算成为显示，基于网络的图像识别，语音识别等大计算服务将很轻松地解决，而这，将是和yami不一样的道路。</p>

<p>软件，是为硬件服务的，而硬件，则是为物物互联，也就是物联网服务的，云计算的兴起和硬件的迅速发展，也给软件创造了一个机会，随着人们娱乐享受的提高，娱乐型软件也又有了重出江湖的趋势，务必要把握好时机，创造出更多与硬件结合的服务。</p>

<p>最后，愿有志之士把握好时代的方向，创造更多有趣的，改变世界的产品。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[马上码代码]]></title>
    <link href="http://mmclub.github.io/blog/2014/02/25/code-right-now/"/>
    <updated>2014-02-25T10:52:41+08:00</updated>
    <id>http://mmclub.github.io/blog/2014/02/25/code-right-now</id>
    <content type="html"><![CDATA[<ul>
<li>作者 <a href="https://github.com/1019439568">ClownQiang</a></li>
</ul>


<p>第一次为俱乐部写一篇博客，关于技术上面确实懂得太少，说的太多可能会使大家误入歧途，不过<a href="https://github.com/oa414">oa414</a>将这个任务交给了我，我还是得认真完成。下面就我来移动MM俱乐部的半年里的感受与体会与大家讲讲，对于我这种低端水平的人怎么去写一个android应用。</p>

<p>刚进俱乐部，就碰上了google大学生开发大赛，这个对于我来说是比较正式的参加校外比赛，虽然技术不怎么样，但是屌丝都有一个高富帅的心，同为屌丝的涛哥和我一起组成了一队。刚好那时看到一个计时类应用，是利用手指的滑动进行时间的记入，很有创意。所以就萌生了开发TimeNote的想法，但是开发的决定过程是很漫长，因为不知道手指滑动记入时间到底怎么实现的，我们陷入一种怪圈子：</p>

<p>他说：“小强，这个太复杂了，感觉实现有点困难，要不我们换成其他计时。”</p>

<p>我说：“我们的这个应用的新意就在这儿。。”</p>

<p>他说：“怎么实现”</p>

<p>我说：“balabalabala。。。”</p>

<p>他说：“balabalabala。。。”</p>

<p>。。。。</p>

<p>然后还是没有结果，同样的现象还发生在后来校科技节中的android开发比赛，为了开发一些比较具有玩乐价值的应用，当时有这样两个选择：<a href="http://as.baidu.com/a/item?docid=5078477">真心话大冒险</a>与谁是卧底, 因为真心话大冒险是我与学姐胡雪茜开发的，所以就以这个为例子。按照惯例，开发之前又是一阵头脑风暴，在学姐“美好”的畅想中，我们的应用<a href="http://as.baidu.com/a/item?docid=5078477">真心话大冒险</a>具有了很多炫的功能，不仅有微信摇一摇功能，还有酷比的阴影旋转效果，但是对于我这种战5水平完全无法实现，“摇一摇”勉强可以实现，但是阴影对于我来说就太什么了点，为了有个好的规划，又开始了激烈的讨论，一个晚上过去了，她的UI界面没出来，我的<a href="http://zh.wikipedia.org/wiki/GitHub">github</a>仓库都没建立。</p>

<p>上面举了两个例子无非是想告诉大家，说的再多也抵不过动手去做，规划固然重要，但是如果拿着规划的幌子去正大光明的浪费时间就只能”呵呵“了。当你要去开发一个软件时，能做的事情很多，而不是用嘴巴去写代码，如果你还是那个开口就是要开发<a href="http://zh.wikipedia.org/wiki/%E5%A4%A7%E5%9E%8B%E5%A4%9A%E4%BA%BA%E5%9C%A8%E7%BA%BF%E8%A7%92%E8%89%B2%E6%89%AE%E6%BC%94%E6%B8%B8%E6%88%8F">MMORPG</a>，或者开发Whatsapp大赚190亿美元，但是又不怎么去做实际事情，那我必须再打击一下你。</p>

<p>曾经有认识的同学有个App想法，基本“万事具备，只欠开发”，不过开发这样的App难度并不低，实现一个完整的IM只是其中一个子功能。在中国这个十几亿的大国，这样或者那样想法每天都不缺，所以如果想以一个想法达到那样的高度是不太合适的。如果你是一个程序员，就应该认真的去看看计算机方面的书;如果你是一个UI设计师，那么就学会用各种可视化布局工具，如：<a href="http://www.bootcss.com/p/layoutit/">LayoutIt</a>，<a href="http://www.bootcss.com/p/bootstrap-wysiwyg/">bootstrap-wysiwyg</a>等等，而不是会做几张图片就谈什么深入群众，“步子太大，小心扯淡”。</p>

<p>今天说的东西不多，作为开学的Blog我表示责任重大，所以在新的学期不要用调戏妹子的言语勾搭计算机，它不吃这一套，所以在你真的想学的时候多去干点实实在在的事情，让自己充实。</p>

<p>那些想学游戏的，马上看看游戏方面的书，以及自己动手开发小的游戏。。。。。。。</p>

<p>那些想学IOS的，马上找找翔宇“学长”。。。。。。。</p>

<p>那些想学UI，马上储备能用实际技能，注意你不是PS怪。。。。。。。。。。。</p>

<p>那些正在扯淡的，马上码代码吧。。。。。。。。。</p>

<h3>最后附上我的一些开源的App作品在Github上的链接：</h3>

<ul>
<li><a href="https://github.com/1019439568/TimeNote">TimeNote</a></li>
<li><a href="https://github.com/1019439568/Truth-or-Dare">真心话大冒险</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[智能手机硬件分析及近期热门智能手机推荐]]></title>
    <link href="http://mmclub.github.io/blog/2014/02/24/talk-about-mobilephone-hardware/"/>
    <updated>2014-02-24T11:15:52+08:00</updated>
    <id>http://mmclub.github.io/blog/2014/02/24/talk-about-mobilephone-hardware</id>
    <content type="html"><![CDATA[<h2>写在前面</h2>

<p>俱乐部近期会持续更新包括移动开发技术点探讨，个人心得等围绕移动互联网领域的一系列文章，敬请期待。</p>

<p>本篇文章作者是俱乐部忠实的米粉，Android开发组成员潘磊同学。</p>

<h2>以下纯属个人观点，丝毫不具备权威性，如有不当之处，欢迎批评指正。</h2>

<h3>外观：</h3>

<p>说到外观，顾名思义，小伙伴们都明白。就是手机的外形样貌，但到底你喜欢什么样的手机那就见仁见智了。这就好比说有的人女神是高圆圆，有的人的女神是东方不败（开个玩笑）。如果每个人的审美都是一样的，那还得了。那到底什么样的外观算得上是好的呢？个人认为很简单，首先那得大部分人喜欢，其次有一部分人不反感，当然肯定会有那么一小部分人很另类，就是跟人家唱反调，那就没办法了。那么外观是谁负责的呢？——工业设计师。(插个小故事，有个妹纸对我说她学的专业是工业设计，我当时还理直气壮的反问她，你一个女孩纸学啥工业设计，表示很不理解。我所认为的工业设计是这样的：一个妹纸整天跟着大型工业机械呆在一起，设计里面的零部件，这简直就是毁灭自己的青春。后来我百度了一下，发现工业设计的定义是这样的：</p>

<p>  工业设计（Industrial Design）指以工学、美学、经济学为基础对工业产品进行设计。工业设计分为产品设计、环境设计、传播设计、设计管理4类；包括造型设计、机械设计、电路设计、服装设计、环境规划、室内设计、建筑设计、UI设计、平面设计、包装设计、广告设计、动画设计、展示设计、网站设计等。工业设计又称工业产品设计学，工业设计涉及到心理学，社会学，美学，人机工程学，机械构造，摄影，色彩学等。工业发展和劳动分工所带来的工业设计，与其它艺术、生产活动、工艺制作等都有明显不同，它是各种学科、技术和审美观念的交叉产物。</p>

<p> 明白了之后，这尼玛，原来是我狭隘了，突出一个尴尬 。)个人认为，目前工业设计做的最好的是苹果公司，当然这跟乔布斯的偏执和追求完美不无关系。可惜天妒英才，乔帮主接受了上帝的召唤为他造手机去了。不过也给我们留下了iphone4s这部永恒的经典，乔布斯重新定义了手机，改变了我们的生活，在此向乔帮主致敬！</p>

<h3>屏幕：</h3>

<p>屏幕是个啥呢，就是显示图像的那块屏，大小，分辨率，显示效果，色彩还原，等等都是衡量一块屏幕质量好坏的重要因素。首先说大小，4英寸指的是屏幕对角线的长度为4英寸，不是面积，有些小伙伴长知识了吧。分辨率指的是啥呢？1280x720？什么意思？意思就屏幕的长度有1280个像素点，宽度有720个像素点。理论上讲单位面积里包含的像素点越多屏幕的清晰度越高。ppi（Pixels per inch）是手机参数里面常见的参数，也就是每英寸所含的像素点数，ppi越高显示效果越好。公式表达为PPI=√（ｘ²＋ｙ²）／ｚ　（ｘ：长度像素数；ｙ：宽度像素数；ｚ：屏幕大小）。iphone4的屏幕是3.5英寸960x640分辨率：
<img src="http://myfb.mingp.net/images/221468706/1392971077.jpg" alt="" /></p>

<p>这下明白了吧，iphone4的屏幕显示效果不用我多说。ppi超过300屏幕已经很清晰了。当然ppi超过一定数值时，人眼已经无法分辨了。过高的ppi对手机来说意义并不大，一块4英寸1280x720的屏幕和一块4英寸1920x1080的屏幕，理论上讲后者更优秀，不过你要是真能看出这两块屏的区别，你长的绝对不是人眼，那我只能说：甚矣！汝之叼也，其父知否？至于色彩还原，呵呵，这涉及到屏幕三原色像素点的排列方式等等一系列的让人头疼的专业知识，解释起来相当麻烦，这里就不做赘述了。（其实我也不太明白。。。）好的，下面为大家介绍一下，现在智能手机搭载的屏幕大致分为以下几种：从供应商的角度来看，最好的屏幕来自日韩厂家，三星、夏普等，多用于高端手机，其次是台湾厂家，奇美、友达等，多用于中端手机，最差的就是大陆的了，多用于低端手机。（对此我只能表示呵呵了，自主知识产权是硬伤啊！）当然，制作工艺的不同也会使显示效果有较大差距，我所知道的有两种工艺，gff和ogs前者跟后者比起来就差了许多，至于为什么我懒得解释啊，那怎么识别这两种工艺呢，如果你看到屏幕全贴合，单玻璃解决方案等宣传字眼，那基本属于比较好的工艺了。其实直接观察手机就可以分别，如果你的手机是黑色的，在待机状态下，屏幕一片漆黑，那工艺较好，如果明显显示出屏幕的轮廓，俗称大灰屏，那基本走远，工艺不会太好，前提是你的手机正面面板是黑色。二者有什么区别呢？最直观的就是可视角度和在强光下的显示效果，前者基本在强光下看不清屏幕，后者较好。当然如果你买的是高端机，就不需要纠结工艺了，必须跟后者是一个级别的，否则怎么对得起高端机的称号，中低端机也许会在制造工艺上节约成本。说了这么多关于屏幕的知识，总结起来，直观的就有4点，屏幕大小，ppi，屏幕供应商和制造工艺。</p>

<h3>CPU：</h3>

<p>cpu的重要性对于手机来说不言而喻，就好比人脑对于人的作用一样。手机cpu芯片的性能决定了智能手机的性能，因为你的所有操作都需要通过cpu来完成。为了介绍cpu，我今天恶补了一下有关cpu的知识，但是看着看着我就发现，如果我跟你讲各种cpu基于什么架构，采用什么工艺，显然是不太现实，肯定行不通，所以我就决定直接说一下各种cpu性能的优缺点。2013年，高端Android智能机采用的cpu基本来自三家，高通、三星、英伟达，在高端智能机市场形成“三足鼎立”的局势。当然国产的中低端手机采用的大多是联发科的cpu。苹果自然使用的是自家的处理器。这里介绍一下2013年高端智能机采用最多的几款cpu，以及中低端市场的联发科cpu（台湾厂商，也算是国产，据说以前是搞山寨机的）。</p>

<hr />

<ul>
<li>三星Exynos 5410双四核处理器</li>
<li>主频1.6g</li>
<li>性能很好，功耗较高，发热比较厉害</li>
</ul>


<hr />

<ul>
<li>高通骁龙600（APQ8064）</li>
<li>主频1.7g 四核</li>
<li>性能很好，功耗高，发热厉害</li>
</ul>


<hr />

<ul>
<li>高通骁龙800（msm8x74系列）</li>
<li>主频2.3g 四核</li>
<li>性能很强，功耗高，发热厉害</li>
</ul>


<hr />

<ul>
<li>英伟达 Nvidia Tegra 4</li>
<li>主频1.8g 4+1核心</li>
<li>性能很强，功耗高，发热厉害</li>
</ul>


<hr />

<ul>
<li>联发科 mtk6589</li>
<li>4核</li>
<li>性能还行，功耗低，发热较低。</li>
</ul>


<hr />

<p>这几款cpu都是2013年的热门cpu，其中从性能来看，Tegra 4和高通骁龙800是一个档次的，属于性能过剩型。Exynos 5410和高通骁龙600是一个档次的，可能Exynos 5410性能要好一点，性能绝对够用（其实也过剩了）。基本上所有的大型游戏都可以完美运行当然考虑到兼容性，还是有特殊情况的。而联发科的mtk系列就比较弱一点，但是日常使用毫无压力，也能运行一部分大型游戏。当然了，性能强劲，功耗高，性能低一点的mtk，功耗低。当然了，我所介绍的这几款cpu除了联发科的，都是旗舰机的标配。当然还有很多手机采用其他cpu，在后面智能手机推荐的时候，会做一些简单的介绍。补充一句，2013年的智能手机中，高通的cpu占据了半壁江山，几乎可以说是垄断了手机cpu市场。2014年将全面发生“核”战争，mtk八核处理器，三星八核处理器。。。。。。。</p>

<h3>摄像头：</h3>

<p>说实话，手机摄像头我知道的不多，这里只从手机厂商经常宣传的几个参数简单介绍一下。手机摄像头由以下几部分组成：PCB板（这是什么我就不介绍了）、DSP（数字信号处理芯片）、传感器、固定器（固定镜头用的）、镜头。其中镜头、DSP、传感器是最重要的三个部分，这些有兴趣的可以了解一下。下面讲一下为大家所熟知的参数—像素，很多手机厂商大肆宣传自家手机采用的是500万，800万，1300万，甚至是4100万像素的摄像头。那么是不是像素越高，成像质量越好呢？当然不是，一味的追求像素只能忽悠一些小白用户。那像素高有什么优点呢？图像的解析力强，细节保留也较多，但是一张照片占用的内存大小也就会很大。动则3、4M一张，有的甚至十几M，这时候，对爱摄影的同学，或者爱自拍的妹子来说，手机内存大小就显得比较重要了。光圈也是经常见到的一种参数，经常看到的参数有2.4 、2.2 、2.0（数字越小，光圈越大），光圈大的好处就是，同样的位置可以获得更大的取景范围，通俗的讲，站在同一位置拍摄一栋大楼，2.4光圈可能只拍到大楼的一半，而2.0可以拍到整栋大楼。（有点夸张了，便于理解，就这么说了。）当然，白平衡也是摄像头的重要方面，白平衡到底是什么，官方解释我就不说了，我的理解是，拍出来的照片场景中的各种颜色是不是和现实中的我们所观察到的颜色一样（完全一样是不可能的）。这里我只能说白平衡做的最好的是iphone，android的通病就是白平衡漂移，当然android发展到现在，这个问题也得到了很大的改善。摄像头方面就说这么多吧。至于什么背照式，堆栈式结构各有优势吧，堆栈式是在背照式上进行改良，理论上应该优秀一些。</p>

<p><em>目前智能手机搭载的操作系统主要有三种android、ios、windowsphone。windowsphone占的比例相对较少，而且我也没用过，也不了解，所以接下来的手机推荐中可能不会出现，或者很少。</em></p>

<p> 首先，我只想说，如果你是土豪，ok，买iphone吧，5s、5、5c、4s都可以买。iphone4的话，你要想买我也不拦着你，但是你不觉得有点过时了吗？5c，个人觉得应该是iphone系列中性价比最高的一款手机了，可是在中国的销量却不怎么样，我觉得应该是定位错了。出来之前国人都认为是廉价版，没想到价格高的可怕。iphone的配置我就不多提了，苹果手机不会将手机配置当做宣传卖点的，基本上都是革命性的创新功能。尽管iphone5s搭载的A7-cpu只有双核，但跟当下的顶级的四核cpu比起来毫不逊色，性能甚至更好。ios操作系统，只有苹果手机可以使用。ios7的流畅度不用多说，系统的UI界面也很美观（当然有的人不这么认为）。个人认为，目前最优秀的智能手机操作系统就是ios。当然，iphone最大的短板就是屏幕太小了，对于今天5.0寸以上手机横行，我只能说iphone的4.0屏幕确实显得有些小气，当然也有人不喜欢大屏手机，但没办法，大屏就是趋势。当然还有一点，价格很高（*丝们伤不起啊）。但是你再看看iphone的做工和材质，以及外观和工业设计，业界无人能及（有点过了，但确实属于顶尖水平）。对于即将到来的iphone6，很可能就是大屏手机，果粉们欢呼吧！</p>

<p> 好了，下面就来讲讲广大机友们都熟悉的android阵营吧，android智能手机市场可谓是百花齐放，百家争鸣。这主要得益于google公司推出的android操作系统是开源的，可以看到系统的源代码，当然这就出现了很多第三方rom，比较优秀的有MIUI、flyme、魔趣、colorOS、乐蛙os、百度云、锤子rom等等，这些都是基于android深度定制的操作系统，本质上就是android系统，兼容android系统的所有应用。当然也有不良厂商将android系统界面做的跟ios如出一辙，这就出现了高仿的iphone，山寨机，不少人上当受骗（我只想说天朝人民的智慧是无穷无尽的啊！）。android最初被广泛使用的版本是2.3，发展到今天，google已经推出了android4.4，如果有iphone用户转战android会觉得明显的卡顿，那你用的应该是2.3的版本，android发展到4.0以上的时候流畅度已经大幅提升，虽然不及ios但是日常使用来说，差距并不明显。当然android系统对硬件配置要求较高，高配置的手机应该是不存在流畅度的问题。近期推出的android4.4版本更是让人惊喜，官方称支持低配手机，照样很流畅。个人喜欢的还是新的运行机制ART，开启ART的话，那流畅度直逼ios7，就是觉得原生android的ui跟ios比起来，算了还是不要比了吧！说到android手机，目前来看，当之无愧的老大哥必须是三星，但是今天，我打算先从HTC（台湾厂商，国产哦&mdash;你觉得呢？）说起，在android刚刚兴起的时候，HTC可谓是占尽了风头，风靡一时。可惜曾经的辉煌渐渐消失殆尽，但是2013年，HTC最让人记住的应该是HTC ONE了。好直接上图。</p>

<hr />

<h3>HTC ONE</h3>

<p><img src="http://myfb.mingp.net/images/221468706/1392971070.jpg" alt="" /></p>

<h4>　硬件外观：</h4>

<p><img src="http://myfb.mingp.net/images/221468706/1392971083.jpg" alt="" /><img src="http://myfb.mingp.net/images/221468706/1392971091.jpg" alt="" /><img src="http://myfb.mingp.net/images/221468706/1392971101.jpg" alt="" /></p>

<p> 用一张照片来衡量手机的全部，这句话适用的机型其实并不多，但HTC ONE绝对配得上这句赞美。它的设计工艺跟用料都是非常独特的。手机上多采用铝合金，优点：可塑性强，易加工。缺点：强度不高，跌落容易留下痕迹。但是HTC ONE铝合金机身牢靠，上手之后你就会知道什么叫高端大气上档次。用一个资深评测人的话来说，在智能手机同质化严重，工业设计差异难寻的今天，ONE的外观绝对算的上是难得一见的上乘佳作。（补一句，国行版的one后盖可拆卸，支持更换电池）</p>

<h4>屏幕显示</h4>

<p>HTC ONE采用的并不是国际上主流的三星或者夏普屏，而是索尼的SLCD，但是不用担心，htc one屏幕的显示效果却丝毫不差，屏幕亮度比iphone5稍低一点，在强光下依旧清晰可见。色彩还原中规中矩，正常使用毫无压力。当然SLCD的显著特点就是有5万小时的使用寿命，使用的十年八年不成问题（时间有点长啊，你一部手机能使用十年？不可能吧，鸡肋的特点。）精细度，色准上都非常的出色。对比度和精细度来说甚至完胜了iphone5。如果你说上面你都看不懂，没关系，你只要记住一句话，one的屏幕一定不会让你失望。</p>

<h4>相机成像</h4>

<p> 像素只有400万？（你tm在逗我，高端机？）no，虽然只有四百万，但是通过一些让你我都听不懂的高端技术，让htc one的相机成像达到了很高的水准，日常生活使用中完全够用，当然在采用了光学防抖等技术之后夜景方面可以与lumia920（870万像素，诺基亚在相机成像方面具有相当高的水平）媲美。高画质的视频录像也还可以，比三星的s4好上那么一点。当然one的相机还有很多特色的功能，这里就不一一列举了。总的来说，白天成像方面良好，弱光条件下表现非常出色。</p>

<h4>系统优化</h4>

<p>基于android4.1的,Sense UI 5.0，加入了自己的特色功能，流畅度方面不用多说，android4.1在这种高端机上运行起来非常流畅。对于Sense UI 5.0，没用过就没有发言权，但是个人觉得系统界面比原生的也漂亮不到哪去。当然也会有一些小问题，基本不影响使用，具体自己体验吧，其实这些都不算是问题，android手机还有一个优点，就是可以自由刷机，有很多第三方rom。如果不喜欢出厂自带的系统，完全可以通过技术手段刷自己喜欢的第三方rom（有需要的可以咨询一下我或者身边爱折腾手机的人）。电池续航的话虽然不及s4但是跟很多同期的旗舰机相比还是有一点优势的，运行大型游戏之后，最高温度在41度左右，不会感觉烫手。</p>

<h4>手机信号</h4>

<p>手机最重要也是最基本的功能就是打电话，手机信号强度影响着通话质量，one的手机信号强度与其他旗舰机相比不容乐观，稍稍高于国家标准，但是欣慰的是高于iphone5，这样一比，是不是就释然了呢？当然日常使用的话，不会有太大的问题。</p>

<h4>总结：</h4>

<p>如果这是你喜欢的外观的话，而你刚好缺一部手机，钱又不是问题，想啥呢，赶紧入手吧。你值得拥有！</p>

<h3>三星s4国行版（其他版本硬件配置有所不同）</h3>

<p><img src="http://myfb.mingp.net/images/221468706/1392971105.jpg" alt="" /></p>

<h4>硬件外观：</h4>

<p><img src="http://myfb.mingp.net/images/221468706/1392971111.jpg" alt="" /><img src="http://myfb.mingp.net/images/221468706/1392971117.jpg" alt="" /><img src="http://myfb.mingp.net/images/221468706/1392971124.jpg" alt="" /><img src="http://myfb.mingp.net/images/221468706/1392971133.jpg" alt="" /></p>

<p>从图片上可以看出，s4的机身材质是万年不变的大塑料，让人十分吐槽无力（那么大一国际厂商，你弄个金属机身会咋样，掉粉啊）。上手之后你就会觉得跟s3没有什么太大差别，但是三星有一个特点就是拼了命的把塑料做得不像塑料。可是塑料就是塑料，骗得了眼睛，可骗不了双手，如果说塑料有什么好处的话就是任韧性好，轻微跌落，不会像金属那样留下凹陷的痕迹。虽说机身强度比较高，缝隙贴合也比较紧密，但是与采用金属和玻璃材质的手机相比，手感差的不是一个档次。当然令人欣慰的是虽然屏幕尺寸变大了，但是机身大小与s3比起来几乎一模一样。</p>

<h4>屏幕显示：</h4>

<p>s4采用的当然是自家的AMOLED屏幕，5寸1080p。总体来说，s4的这款super AMOLED质量还是非常高的，最大亮度方面比s3提升了不少，一定程度上解决了AMOLED屏幕一直以来饱受诟病的强光下看不见屏幕的问题。当然AMOLED屏幕最大的缺点就是色彩还原不是很准，其实这也没什么影响，在这种情况下显示出来的照片虽然和现实中不是很接近，但是也有可能会更加的讨好眼球。当然s4的这块屏综合素质还是挺高的。s4的屏幕还支持超灵敏触控，带着手套也能操作。</p>

<h4>相机成像：</h4>

<p>s4选择了索尼的背照式1300万像素摄像头。白天成像方面，s4成像细节轻松击败HTC ONE，当然了这就是高像素带来的好处。白平衡方面超越htc one和iphone5（这两部手机的白平衡已经相当准确了。）s4的白天成像是同期推出的手机中把1300万像素发挥的最好的一步手机。s4的光学素质可以说是具备了主流DC（数码相机）的水平。夜间成像的，话则不敌one和iphone5了。总体来说s4的相机具备了相当强的实力。</p>

<h4>系统优化：</h4>

<p> 三星系统的ui界面有一种大自然的感觉，看上去清新简洁，流畅度在这种高端机上算是免检的，不用担心。android系统经过三星的定制之后，也加入了很多有趣的功能，比如分屏操作，就是一块屏幕上同时显示两个应用窗口。眼球滚动识别，浏览网页时可以根据眼球转动自动滚动等等。实际体验下来这些功能的实用性都不高，也有一些十分鸡肋的功能，这里就不一一赘述了，个人不太喜欢三星系统的UI风格。s4的发热情况比较严重，虽然最高温度也在41度左右，但是s4升温速度很快，这就造成了经常感觉发热厉害的现象，这样说来也有点尴尬。</p>

<h4>手机信号：</h4>

<p> 与同期上市的旗舰机相比，s4的信号强度有着不俗的实力，在这个方面大可不必担心。</p>

<h4>总结：</h4>

<p>三星的s4在硬件配置方面达到了很高的水平，软件优化也比较到位，但是与上一代s3相比没有什么明显的优势。当然也是一款值得拥有的神器。</p>

<hr />

<h3>google nexus 5</h3>

<pre><code>简介:这款手机可能知道的人比较少，这是由google公司进行设计，LG代工生产的智能手机，搭载google最新推出的android4.4操作系统，最原生态的android操作系统。当然由于google公司和中国政府之间不愉快的合作经历，这款手机不会有国行版，天朝的android智能手机都不允许出厂时带有google服务框架（貌似是这样的）。
</code></pre>

<p><img src="http://myfb.mingp.net/images/221468706/1392972577.jpg" alt="" />
<img src="http://myfb.mingp.net/images/221468706/1392972589.jpg" alt="" />
<img src="http://myfb.mingp.net/images/221468706/1392972595.jpg" alt="" /></p>

<h4>外观：</h4>

<p><img src="http://myfb.mingp.net/images/221468706/1392972732.jpg" alt="" />
<img src="http://myfb.mingp.net/images/221468706/1392972739.jpg" alt="" />
<img src="http://myfb.mingp.net/images/221468706/1392972749.jpg" alt="" />
<img src="http://myfb.mingp.net/images/221468706/1392972756.jpg" alt="" /></p>

<p>同样是塑料材质，但是通过特殊工艺的处理，手感同s4应该不同，一体化机身，后盖不可拆卸，不可更换电池。做工方面，水准不是特别高。总体来说，外观到底怎么样各位就自己看着办吧。轻薄的机身拿在手上还是有那么几分气质的人群中使用识别率还可以。</p>

<h4>屏幕显示：</h4>

<p> nexus 5 采用4.95寸ips屏ppi 440 全贴合，这几个参数上面都介绍过，不再讲解，操作体验非常不错正面看，色彩还原非常准确，效果直逼iphone5s，对比度还好，亮度略低。但是角度倾斜，显示效果就大打折扣。但是这取决于个人习惯，没人会故意斜视手机屏幕，这样看来，也不算是什么缺点。这块屏幕的综合素质挺高，显示效果相当出色。</p>

<h4>相机成像：</h4>

<p> nexus 5采用的是800万像素摄像头，具有光学防抖功能，不过相机应用的原生界面可能不适合国人使用，再有就是背部镜头稍微突起，镜片的强度不够高，容易刮花，影响拍照质量，当然小心保护也就不是问题。白平衡漂移有的时候比较严重，白天还好，光线不稳定的话就呵呵了，2.5光圈取景范围较小。不过自带的HDR+功能也能够弥补这些缺点。虽然多数情况下不如iphone5，但是也算android阵营里面800万像素的标杆。</p>

<h4>系统优化</h4>

<p>这就不必多说了，搭载android4.4操作系统，ui界面也变得小清新起来，个人觉得比之前好多了，开启art模式，应用的加载速度也变得更快，由于是原生的android操作系统，可能跟国人的使用习惯很不一样，作为2013年后半年出的旗舰机，各项配置已经达到了2013年下半年android智能机的顶级水平，再加上android4.4的优化，操作体验应该会带来惊喜。当然搭载骁龙800处理器，发热也将是一个问题，电池的续航能力也好不到哪去。不过这些在我看来都不是什么太大的问题。</p>

<h4>手机信号</h4>

<p> 信号强度不必担心，在各大旗舰机中排行应该是靠前的。</p>

<h4>总结：</h4>

<p> 不管怎么说，nexus5也算是目前为止配置顶级的旗舰机型，但是要买的话只能买美版或者港版，二者的差异也就是支持的网络制式有所差别。这款手机在美国的性价比很高，在中国购买的话，只能找淘宝代购了。</p>

<hr />

<p>以上讲得都是android阵营里面国际知名的品牌，其实我写这篇日志的真正目的是想写国产高性价比手机的推荐，因为多数人用的还是国产手机比较多。android智能手机还有一个特点，就是高端机型降价特别快，拿s4来说，刚上市的时候5000+，现在已经降到3500了。看到这有的人可能会觉得说，索尼呢？那也是国际知名品牌啊，产品做得也相当不错，为什么不写？对不起，本人对日货不太感兴趣。接下来就该是国产机亮相的时候，说到国产，最令人关注的当属小米和魅族了。</p>

<p> 在讲国产手机之前，有必要吐槽一下，说到国产，大部分人的第一感觉就是山寨（made in china）。在智能手机诞生之前，中国市场确实是山寨机横行，大多数质量都比较渣。许多比较有信誉的国产手机厂商也推出过一些比较优秀的产品，但总觉得国人对国产手机有有一种不信任感，买手机还是诺基亚或者三星。智能手机兴起之后，国人渐渐开始关注国产手机，特别是最近两年，国产手机的飞速发展让国人对国产手机的看法大有改观。最具代表性的就是中华酷联，他们的产品遍及中国的每一个角落，其中重要的原因就是价格便宜。当然，也就是一些低端手机卖得比较多，高端手机价格太贵，人们就更愿意买苹果三星。直到小米1问世，改变了这一个现状，打着高性价比的旗号，秉承为发烧而生的理念，小米1的配置是当时顶级配置，售价1999，几乎是同配置手机价格的一半，市场反响很大，后来的米2，米2s，红米，更是创造了奇迹，越来越多的人开始关注小米，当然高性价比并不是小米的唯一优势，小米的核心竞争力还是MIUI，基于android深度定制的操作系统，凭着许多人性化的功能设计和良好的用户体验获得了更多用户的青睐，也渐渐形成了独特的米粉文化。抛开小米手机本身，小米可以说是拉低了国产手机的价格，“高性价比”也逐渐成为国产手机的代名词，许多国产手机厂商开始学习小米，加入到高性价比手机的行列。我们可以看到2013年下半年国产手机全面崛起，各大国产手机厂商纷纷推出了自己具有超高性价比的旗舰机型，这对小米来说可能是一个巨大的挑战，但是对我们消费者来说，这毫无疑问是一件好事。好了下面我们来看一下各种国产旗舰机的盛况。</p>

<hr />

<h3>小米3：</h3>

<p><img src="http://myfb.mingp.net/images/221468706/1392972855.jpg" alt="" />
<img src="http://myfb.mingp.net/images/221468706/1392972860.jpg" alt="" /></p>

<h4>硬件外观：</h4>

<p><img src="http://myfb.mingp.net/images/221468706/1392973025.jpg" alt="" />
<img src="http://myfb.mingp.net/images/221468706/1392973031.jpg" alt="" />
<img src="http://myfb.mingp.net/images/221468706/1392973038.jpg" alt="" />
<img src="http://myfb.mingp.net/images/221468706/1392973047.jpg" alt="" /></p>

<pre><code>米3采用的是一体化机身不可更换电池设计，内部采用镁铝合金框架使机身更加轻巧牢固，厚度也比较薄，仅有8.1毫米，机身身使用塑料材质，经过哑光处理，使握感更好，看上去像金属，档次也提升了不少，但是容易沾染指纹和油污。再看米3的外观，方正硬朗（这分明就是lumia 920+联想k900的结合体嘛！），风格与自家的2s截然不同，在工业设计方面有所提升，但是还是没有自己鲜明的特点。当然那宽的可以跑飞机的边框也遭到了吐槽和不满，5英寸的屏幕机身可以做到这么大也是十分不容易。同样是5寸的手机s4比米3小上一圈，甚至连魅族mx3 5.1寸的屏幕机身也比米3小，对此，我只能表示无奈，做工方面虽说不能与国际水平相比，但是在国产机中也算的上是优秀的产品。最后我还是想吐槽一下，真的是太大了。
</code></pre>

<h4>屏幕显示：</h4>

<p> 米3采用的是 夏普5英寸ips1080p全高清屏，ppi为441，采用ogs全贴合技术，分辨率1920x1280，屏幕的细腻程度无可挑剔，色彩还原也非常准确，比米2s有着不小的提升，色温的调矫也更加细腻，但是对比度比2s有所下降，也伴随着轻微的漏光现象（这是国产手机的通病），对我们普通用户来说，抛开这些参数和工艺，米3的屏幕无论是从细腻度还是显示效果，都是属于顶级水平。另外，米3的屏幕支持超灵敏触控，支持戴手套操作和湿手操作。（对于这两项功能我从来没有用过，至少对我来说意义不大，提到这点的意思就是，买手机的时候，不要被各种特色的功能影响了自己的判断，一切从实用性出发，有些功能只是营销噱头，当然各种功能对每个人的意义是不一样的，适合自己的才是最重要的。)</p>

<h4>相机成像：</h4>

<p> 米3采用的是索尼1300万堆栈式摄像头，白平衡方面做得不是很好，但是比起上一代产品2s有了不小的提升，画面细节方面1300万像素不用多说，有着不俗的细节解析能力。小米的摄像软件提供了两种模式，简单模式和专家模式。简单模式简单方便，自动对焦调光，只需按一下快门即可，专家模式当然是为摄影爱好者准备的，很多参数都可以自己调节，比如iso，曝光补偿，白平衡调节，等等，没有单反，也可以用手机体验一下单反的快感，raw格式也是小米相机中的特色功能，这个功能对普通用户来说意义不大，专业摄影师倒是可以尝试一下。其实对这些摄像头的分析，只是专业人士经过深度挖掘对比得出的结论，从结论上看，与国际水平上还有一定差距，但是对于我们普通用户来说，这种差距是感觉不到的，总体来说小米手机的摄像头还是很给力的，可玩性非常高。国产手机的成像质量正在全力赶超国际水平，我们所能做的就是支持国产，耐心的等待国产手机的逆袭。</p>

<h4>系统优化：</h4>

<p> 米3搭载的是基于android4.2.1深度定制的MIUIv5，这是国内最优秀的第三方rom之一（其实我很想把之一去掉，但是为了避免被喜欢魅族的朋友吐槽，还是加上吧，不得不说flyme也是很优秀的rom）。关于系统优化这方面，能讲得实在是太多了，MIUI对原生的android做了很多优化，添加了很多特色的小功能，简单方便。系统界面的也是我比较喜欢的，MIUI的特色在于，拨号，短信，桌面，百变锁屏，个性主题，安全中心，云服务等等，你能想到的，你想不到的功能他都有，个性化极强，可玩性极强。最重要的就是miui强大的自我修复能力，每周五的系统更新，不仅有小问题的修复，还会有几个新功能的加入。也许你会觉得你用的小米手机会有一些小的问题，但是我想说的是，只要不是硬件问题，一切问题都不是问题，因为说不定哪个星期五，那个问题就解决了。但是前提是你的系统是开发版，小米手机出产自带的都是稳定版本，更新周期不稳定。而开发版则是每周更新，官方称之为橙色星期五。你可以通过官网教程轻松刷成开发版。MIUI还为很多热门机型做了适配，如果你想尝试MIUI可以到官网下载rom尝试一下，目前官方支持的机型有191款，当然还有很多民间大神适配的机型。总的来说，miui已经逐渐形成了一个生态系统，很多服务都高度集成在miui中，简单易用，是小米手机的核心竞争力。我个人非常期待MIUIv6！</p>

<h4>手机信号：</h4>

<p>手机信号在测试中，与其他旗舰机型相比名列前茅，完全不用担心，电池续航方面好于s4。</p>

<h4>总结：</h4>

<p>  小米手机3移动版采用的是Nvidia Tegra4处理器，联通电信版采用的是骁龙800处理器，配置方面达到了android阵营里面旗舰配置的标准，目前电信版还未上市，有消息称2月中旬上市。发热方面，满负荷运行的话温度达到51度左右，高的有点可怕，但是正常使用的话一般维持在三十七八度（国产手机对于发热的控制与国际水平有所差距），不必担心。如果你对性能有着偏执的追求，对手机外观不是那么在意的话（个人还是很喜欢小米3的外观的，不过相比起来，更喜欢2s），小米3是一个非常不错的选择。（不过这款手机购买难度比较大，需抢购。这也是很多人吐槽的地方，我只想说，算了，说了也没用，目前不可能不限量购买的。）</p>

<hr />

<h3>魅族MX3：</h3>

<pre><code>说到魅族，有很多人说：因为小米，提升了魅族的知名度。到底是不是，不用去深究，反正我本人在是在知道小米之后魅族才渐渐进入我的视野，当然这跟魅族的企业文化有很大关系，魅族以前是做MP3、MP4、耳机等电子音乐产品，后来开始研发智能手机，一开始产品风格跟苹果很像，后来逐渐形成自己的风格。魅族那最亮眼的home键就是从一开始模仿苹果的home键慢慢演化而来形成了现在这个样子，flyme也是基于android深度定制的操作系统，也是魅族手机产品的核心竞争力，被魅族称为“产品的灵魂所在”。江湖传言，魅族老总黄章和小米ceo雷军有着“说不清道不明”的恩怨 ，也使小米和魅族生来就是冤家。米粉和魅友之间的唇枪舌剑，从未停止过（这里指的是脑残粉，我就搞不明白了，有什么可吵的，非得拼个你死我活，一决高下。你是减肥成功了还是策马奔腾了，净干些吃力不讨好的事情，这也难怪，要不然怎么称之为脑残粉呢。不好意思，跑题了。）。回到魅族，2013年当家的旗舰机就是MX3。
</code></pre>

<p><img src="http://myfb.mingp.net/images/221468706/1392973133.jpg" alt="" /></p>

<h4>硬件外观：</h4>

<p><img src="http://myfb.mingp.net/images/221468706/1392973200.jpg" alt="" />
<img src="http://myfb.mingp.net/images/221468706/1392973209.jpg" alt="" />
<img src="http://myfb.mingp.net/images/221468706/1392973217.jpg" alt="" />
<img src="http://myfb.mingp.net/images/221468706/1392973223.jpg" alt="" /></p>

<pre><code>第一眼看上去被惊艳到了有不有，那边框窄的恨不得要去掉一般，得益于超窄边框的设计，即使是5.1寸的屏幕机身也要比小米3小上一圈，便于单手操作。后盖采用塑料，经过特殊工艺处理，看起来晶莹剔透。但是有一点不是很明白，后盖可拆卸却不可更换电池，只是用来插电话卡的，采用这样的设计，我不知道是出于什么心态。排除这些小瑕疵不说，魅族的工业设计在国内也算是领先水平，MX3做的非常精致。这里特别提一下魅族机身边缘的厚度问题，据说魅族MX3的量产机边缘厚度比试验机薄了0.07毫米，魅族老总黄章在把玩试验机的时候，不知哪根筋搭错了，觉得手感欠佳，用自己的木质手板模型反复打磨，终于找出了这0.07毫米的差距（我去，这0.07毫米，你的手的能感觉出来，真是服了you了，再说了，你握着舒服了，别人握着也舒服吗，你以为人家妹子的手跟你长得一样啊，这到底是为用户做手机，还是为你做手机啊。当然了，吐槽归吐槽啊，这种追求极致的工匠精神还是值得肯定的，不过为了这0.07毫米，花上百万重新开模，绝对的强迫症晚期[开个玩笑！]）。做工方面，也是国内上佳水准。总体来说，MX3的工业设计还是很成功的。
</code></pre>

<h4>屏幕显示：</h4>

<p> 魅族MX3采用的也是夏普的1080p高清屏幕，5.1寸，分辨率1800x1080（这个分辨率比较奇葩，国际主流水准都是16:9，它是15:9，官方说这个比例更讨好眼球，当然，15:9就意味着，与同尺寸的屏幕相比，面积更大。但是常用应用兼容的很好，比不担心。），ppi 415。屏幕的色彩还原方面表现不是很好，对比度低（可能是故意为之，来凸显flyme3.0系统的素雅的特点。）， 在工艺上甚至略好与小米3，总体来说，显示效果细腻，可视角度良好，与小米3难分辨伯仲。</p>

<h4>相机成像：</h4>

<p> MX3采用的是索尼800万背照式摄像头2.0光圈，除了细节解析方面不敌小米3外，其他方面基本都优于米3，白平衡非常准确，可以说是达到了国际标准。相机成像这方面大可不必担心。这里就不多说了。</p>

<h4>系统优化：</h4>

<p> MX3搭载的是基于android定制的flyme3.0系统，界面风格属于小清新范，简单素雅，有许多对大屏手机的优化，推出了许多适合单手操作的功能，设计更加人性化，这里不得不吐槽的就是，flyme里面的功能，有的让你感觉心情愉快，爽翻天，可也有的功能让你咬牙切齿想破口大骂（这不是我说的啊，我只是盗用了了资深测评人的语录）。这里再一次体现出，魅族到底是在为黄章做手机，还是在为用户做手机的问题，比如有一个叫smartbar的东西，黄章对于自己的这个发明偏爱有加，不过实际应用起来，各种不兼容，有碍观瞻，用户体验极差。曾经有魅友在魅族官方论坛发帖提出建议去掉smartbar，结果黄章回复了一句：不喜欢就滚！（这尼玛，我的世界观又毁灭了一次，这货跟我们生活的是同一个世界吗 ，我已经彻底无语了。）再次抛开这些瑕疵不说，flyme也是一个优秀的第三方rom，如果你对smartbar很讨厌，网上有很多教程可以在不影响系统运行的情况下去掉。</p>

<h4>手机信号：</h4>

<p> 国产手机对于手机信号的重视不用多言，基本与米3一个水平。电池续航的话比米3差了一点，发热情况比米3严重，但是基本不影响使用。</p>

<h4>总结：</h4>

<p>  MX3是一个不可多得的好手机，精致的外观加上舒适的握感获得了许多用户的喜爱，不得不说mx3是一个有特色有个性的产品，不管别人怎么说，建议是好是坏，一概不听，始终坚持这自己的风格，也有那么一群人喜欢这种坚持。这也导致在国内的销量与名气不成正比，属于小而美。魅族对于产品的专注度可以说是超过了任何一家公司，可是公司独特（奇葩）的企业文化让魅族无法真正的绽放自己的光彩。回到mx3，个人觉得更适合女生，秀气的外观，轻巧的机身，简直就是为妹子们量身打造的，我没说男生不能用啊。总的来说mx3真心不错。</p>

<p>  写到这里，我觉得不能再这么写下去了，在详细分析了5款手机之后，觉得再写下去没必要了，小伙伴们应该都大概知道从哪些方面去判断一款手机的好坏了。（说明：为了介绍这些手机，我浏览了很多网站，看了很多测评文章和视频，也研究了好多关于cpu，屏幕，摄像头的知识，这次是真的长知识了，以上的所有观点，全部是我从我看到的听到的无数篇测评文章和视频中总结出来的，也加上了自己的一些观点。也许和实际情况有所不同，但是限于本人能力有限，能写的只有这么多了）</p>

<p>下面就列举一下国产手机中性价比较高的几款手机，小米2s、魅族mx2、Nubia Z5S、Nubia Z5S mini、金立Elife E7、金立Elife E6、华为荣耀3X、华为荣耀3C、红米。。。。。。其实还有很多国产手机没有列举，我挑选了几款最具性价比的手机作为代表。这里就不再继续写下去了，最后在扯一下个人对于国产手机的看法，说是国产手机，可是屏幕，cpu，摄像头都是国外进口的，组装起来就是国产了。你好意思说是国产，我都不好意思听，这也是没办法的事情，不得不承认，国产手机正在飞速崛起，这是一个积极的信号，华为中兴都在研发具有自主知识产权的cpu，华为的海思处理器，特点在于音频解码能力强，代表机型有华为p6，这是一款外观精致的手机。听说最近天朝也发布了具有自主知识产权的操作系统，cos和960os，号称从安全角度出发，从本质上区别于android和ios，好吧，这又是一个积极的信号，但是这真的能打败ios和android吗？我觉得天朝不采取点强制性措施是不可能的。不过就目前情况来看cos并不被看好，甚至已经淡出人们的视线。由于miui的成功，最近又蹦出了IUNI OS（基于android深度定制的ROM），号称以小米反小米，IUNI界面简洁漂亮，给人一种清爽的感觉，不过免不了被扣上模仿ios7的帽子，据IUNI官方宣称，IUNI手机在性价比方面将全面超越小米手机，这一点值得期待，与miui不同，IUNI给系统做减法，精简rom打着生来纯净的旗号，集成了一些第三方服务，不会预装任何第三方软件。目前IUNI手机还没有上市，据说2014年3月上市，IUNI　OS目前适配了三星s4，有兴趣的同学可以刷机体验一把，2014年2月24日开放公测，之后会陆续适配热门手机。好了，我了解的就只有这么多了，喜欢搞机的同学可以自己上网去详细了解一下。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hello World]]></title>
    <link href="http://mmclub.github.io/blog/2014/01/24/hello-world/"/>
    <updated>2014-01-24T23:05:46+08:00</updated>
    <id>http://mmclub.github.io/blog/2014/01/24/hello-world</id>
    <content type="html"><![CDATA[<p>欢迎进入南京邮电大学移动互联网俱乐部的Blog。</p>
]]></content>
  </entry>
  
</feed>
