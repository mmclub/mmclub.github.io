<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: 外包 | 南京邮电大学移动互联网俱乐部]]></title>
  <link href="http://mmclub.github.io/blog/categories/wai-bao/atom.xml" rel="self"/>
  <link href="http://mmclub.github.io/"/>
  <updated>2014-06-08T11:03:12+08:00</updated>
  <id>http://mmclub.github.io/</id>
  <author>
    <name><![CDATA[MMClub]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[关于某App外包开发心得－Android篇（二）]]></title>
    <link href="http://mmclub.github.io/blog/2014/06/01/think-of-a-outsourcing-app-develpment-2/"/>
    <updated>2014-06-01T20:59:40+08:00</updated>
    <id>http://mmclub.github.io/blog/2014/06/01/think-of-a-outsourcing-app-develpment-2</id>
    <content type="html"><![CDATA[<ul>
<li>作者: 王涛</li>
</ul>


<h3>项目开发心得——合作篇</h3>

<p>第一次做有规模的项目，跟之前的写些小东西相比，主要区别是：那人钱财，给人办事。但是既然是项目，我们就得以集体利益，也就是保质保量的完成东西为最终目标不是？</p>

<ol>
<li><h4>与客户交流</h4>

<ol>
<li><h5>需求明确</h5>

<ol>
<li><p>95%以上的需求要定</p></li>
<li><p>改需求 = 做重复劳动 &ndash;> 程序员最难受的事情</p></li>
</ol>
</li>
<li><h5>阶段交付</h5>

<ol>
<li><p>明确交付时间</p></li>
<li><p>阶段交付，确保和客户的需求没有大的偏差</p></li>
</ol>
</li>
</ol>
</li>
<li><h4>与UI交流</h4>

<ol>
<li><h5>设计稿要程序参与</h5>

<ol>
<li><p>设计没有代码经验，难免会做出很多让程序心碎的设计</p>

<blockquote><p>这里最好熟悉AndroidUI设计推荐风格，因为只有越符合标准，越节约体力不是？</p></blockquote></li>
<li><p>相同的功能设计的方式有很多种，有程序的参与会选出既好实现又符合需求的设计</p></li>
<li><p>各个部分的效果要讨论明确，不然程序会做画蛇添足的事</p>

<blockquote><p>例如我就把一个Item按钮写成了N个按钮，而且不只是多多了几个按钮那么简单</p></blockquote></li>
</ol>
</li>
<li><h5>简洁设计，但要完整</h5>

<ol>
<li><p>能够表达清楚叫好了，没必要太花哨</p></li>
<li><p>面面俱到，只要是不用原生的地方都要给出设计资源，这里如果设计师没能考虑周全，我们程序就要做善意的提醒了</p></li>
</ol>
</li>
<li><h5>Android多平台设计需求</h5>

<ol>
<li><p>Android最蛋疼的分辨率适配，要明确需要适配的种类，</p></li>
<li><p>这时候就需要设计师要针对各个分辨率设计包括：</p>

<ol>
<li><p>字号，这里需要说一下，建议不要设计太多种类的字号，想清楚要突出的部分，各个部分的之间的关系</p></li>
<li><p>色系，建议不要太花，定好基调，保持风格一致。</p></li>
<li><p>布局，Padding，Margin，border，corners</p></li>
<li><p>字段，要显示的内容，要明确，不然又要重复劳动，看到这四个字就浑身难受！</p></li>
</ol>
</li>
</ol>
</li>
<li><h5>图片资源交接</h5>

<ol>
<li><p><strong>发送方式</strong></p>

<ol>
<li><p>trello.com是个很好的平台，可以用来上传下载图片，很方便，便于分类管理。</p></li>
<li><p>邮件，速度快，便于保存，但不好分类管理，文件多了容易找不到。</p></li>
</ol>
</li>
<li><p><strong>文件夹命名</strong></p>

<ol>
<li><p>建议根据所属页面命名，按层级分类</p></li>
<li><p>建议用英文例如：Home_Bottom_RadioButton</p></li>
</ol>
</li>
<li><strong>文件命名</strong>

<ol>
<li><p>必须用英文，如果设计用汉字，不仅有乱码风险，而且还得挨个换成英文，累死！</p></li>
<li><p>由于大家对英文单词理解不同，最好先讨论下</p></li>
</ol>
</li>
</ol>
</li>
</ol>
</li>
<li><h4>与Web后台交流</h4>

<ol>
<li><p>API的字段要交流好。这就要建立在：需求确定 &ndash;> 设计显示内容确定 &ndash;> 程序实现方式确定 &ndash;> API的字段交流</p></li>
<li><p>API说明文档要交流，不然容易忽略重要内容</p>

<blockquote><p>有个API是数据库要用户信息，我想当然以为是GET，但其实是POST，若是Web后台有特别考虑，要特别说明，不然会出现莫名其妙的错误</p></blockquote></li>
<li><p>更新API要通知，不然会突然找不到数据。尤其是有一次被Web后台坑了，同样的字段，名字却打错了，害我调试好半天</p></li>
</ol>
</li>
<li><h4>与客户端合作者交流</h4>

<ol>
<li><p>项目开始前的计划：</p>

<ol>
<li><p><strong>项目结构：</strong></p>

<ol>
<li><p>代码：Model，Adapter，Activity，View，Utils，Constant</p></li>
<li><p>资源文件：</p>

<ol>
<li><p>定好各个色值，字号，便于调用且统一</p></li>
<li><p>为了适配，建不同分辨率的资源文件，例如</p>

<ul>
<li>values</li>
<li>values-mdpi</li>
<li>values-hdpi</li>
<li>values-xhdpi</li>
</ul>
</li>
<li><p>为了适配，要用demin</p></li>
<li><p>若控件很多且相似，可以用style让代码量减少</p></li>
</ol>
</li>
</ol>
</li>
<li><p><strong>模块划分：</strong>这次做的信息类应用，大致上以页面划分</p></li>
<li><p><strong>View：</strong>下拉菜单，Dialog，Toast，写好接口，方便使用</p></li>
<li><p><strong>Utils：</strong>应用中的某些部分可以做成工具类，文件操作，用户登录信息操作，网络连接检查等</p></li>
<li><p><strong>Constant：</strong>应用中的字符串常量</p></li>
</ol>
</li>
<li><p>开发中遇到变化</p>

<ol>
<li><p>几个人同时改动了一个类要注明，例如：//Foci Add</p></li>
<li><p>了解别人的代码，为了学习，也为了整个项目更好开发</p></li>
</ol>
</li>
</ol>
</li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[关于某App外包开发心得－iOS篇（一）]]></title>
    <link href="http://mmclub.github.io/blog/2014/06/01/think-of-a-outsourcing-app-ios-develpment-1/"/>
    <updated>2014-06-01T10:26:47+08:00</updated>
    <id>http://mmclub.github.io/blog/2014/06/01/think-of-a-outsourcing-app-ios-develpment-1</id>
    <content type="html"><![CDATA[<ul>
<li>作者 ： 林翔宇</li>
</ul>


<p>前不久和朋友一起合作了一个外包App项目，我负责iOS和后台Server，另外两名同学合作开发Android端。现在项目已经进入收尾上架工作，我将就开发过程中的一些感想与收获进行总结。</p>

<h2>使用CocoaPods做依赖管理以及开发用到的第三方开源项目</h2>

<p>CocoaPods真是依赖管理神器，比Andorid的Maven或者Gradle方便多了。具体试用可以看看这篇文章<a href="http://blog.devtang.com/blog/2014/05/25/use-cocoapod-to-manage-ios-lib-dependency/">唐巧－用CocoaPods做iOS程序的依赖管理
</a></p>

<p>而且最近CocoaPods的Spec有了第三方国内镜像，速度快多了，为什么之前开发的时候木有，加一个库要等半天(ノДＴ) 。 所以我之前修改Podfile后是这样更新的（不更新Spec库并且有提示）：</p>

<p><code>
pod install --verbose --no-repo-update   
</code></p>

<p>我项目里面的第三方依赖有：</p>

<p>```</p>

<pre><code>#import &lt;AVOSCloud/AVOSCloud.h&gt; // AVOSCloud SDK
#import &lt;MAMapKit/MAMapKit.h&gt;   // 高德地图
#import &lt;AFNetworking/AFNetworking.h&gt; // AFNetworking 网络通信   

#import &lt;UIColor+ChineseColor.h&gt; // 自己的项目复用模块
#import &lt;MMCommon/MMCommon.h&gt;  

#import &lt;SVProgressHUD/SVProgressHUD.h&gt; // 加载提示的HUD

#import &lt;Underscore.m/Underscore.h&gt; // Objective-C的类似JavaScript的Underscore.js的辅助库

#import &lt;UMengAnalytics/MobClick.h&gt;  // 友盟统计和SNS集成
#import &lt;TencentOpenAPI/TencentApiInterface.h&gt;
#import &lt;TencentOpenAPI/QQApiInterface.h&gt;
#import &lt;TencentOpenAPI/TencentOAuth.h&gt;
#import &lt;UMengSocial/UMSocialData.h&gt;
#import &lt;UMengSocial/UMSocialSnsService.h&gt;

#import &lt;SDWebImage/UIButton+WebCache.h&gt; // 异步图片加载
#import &lt;SDWebImage/UIImage+GIF.h&gt;
#import &lt;SDWebImage/UIImageView+WebCache.h&gt;
#import &lt;SDWebImage/UIImageView+WebCache.h&gt;
</code></pre>

<p>```</p>

<p>不得不提的是使用中。。友盟以及SNS集成过程中，不够清楚的文档以及那些坑的地方，还有调试了几天才发现是SDK悄悄升级，之前的SDK不能用的情况。</p>

<p>在使用的时候，为了更优雅的进行依赖管理，我也为高德地图和友盟SNS创建了Podfile并且提交到了CocoaPods/Spec库里面，需要的童鞋可以看看<a href="https://github.com/oa414/Specs/commits/master">https://github.com/oa414/Specs/commits/master</a></p>

<p>我们同时用了AVOSCloud与友盟，这两个第三方开发者平台功能有很多重复，但是当前各有长处。未来可能迁移到其中一个。</p>

<h2>iOS MVC与界面布局的一些实践</h2>

<p>最初的时候，为了快速开发，全部使用了Storyboard，这让我在一个小时就把几十个页面跳转关系全部做好了。。。而且可以作为原型演示给UI童鞋和Android童鞋看。到后来，发现Storyboard管理几十个页面完全是坑，很多东西代码写更方便，并且即使是23寸的显示器在Interface Building里面拖动各个View也好麻烦。。。于是把这个Tab布局的应用按照五个Tab拆成五个StoryBoard了。主要用代码做布局和跳转，同时取巧用了StoryBoard一些方便的地方。</p>

<p>把各个Tab对应内容分离到不同的StoryBoard的方法：（代码好丑）</p>

<p>```</p>

<p>+(UIViewController <em>)initViewController :(NSString </em>)storyBoardName</p>

<pre><code>                        identifier:(NSString *)identifier
                          iconName:(NSString *)iconName
                             withTag:(int) tag{

UIViewController *vc = [SXAppDelegate viewControllerWithStoryBoard:storyBoardName identifier:identifier];
UINavigationController *nav = [[UINavigationController alloc] initWithRootViewController:vc];

[nav.tabBarItem setImage:[SXAppDelegate getIconImage:iconName]];

nav.tabBarItem.image = [[SXAppDelegate getIconImage:iconName] imageWithRenderingMode:UIImageRenderingModeAlwaysOriginal];


UIImage *selectImage = [SXAppDelegate getIconPressedImage:iconName];
selectImage = [selectImage imageWithRenderingMode:UIImageRenderingModeAlwaysOriginal];
DebugLog(@"select Image %@", selectImage);
[nav.tabBarItem setSelectedImage:selectImage];
nav.tabBarItem.selectedImage = selectImage;
[[UITabBar appearance] setTintColor:[SXAppDelegate getNavColor:iconName]];

nav.tabBarItem.tag = tag;

[nav.tabBarItem setTitleTextAttributes:@{
                                        NSForegroundColorAttributeName : [SXAppDelegate getNavColor:iconName] }     forState:UIControlStateSelected];



NSDictionary *titles = @{
    @"home" : @"首页",
    @"product":@"产品",
    @"news": @"新闻",
    @"my": @"我的",
    @"more": @"更多",
};
[nav.tabBarItem setTitle:titles[iconName]];
return nav;
</code></pre>

<p>}</p>

<pre><code>self.tabBarController = [[UITabBarController alloc] init];

self.regVC = [SXAppDelegate initViewController:@"My" identifier:@"login" iconName:@"my" withTag:3];
self.userVC = [SXAppDelegate initViewController:@"My" identifier:@"index" iconName:@"my" withTag:3];
self.indexVC = [SXAppDelegate initViewController:@"Main" identifier:@"index" iconName:@"home" withTag:0];
self.productVC = [SXAppDelegate initViewController:@"Product" identifier:@"index" iconName:@"product" withTag:1];
self.newsVC = [SXAppDelegate initViewController:@"News" identifier:@"index" iconName:@"news" withTag:2];
self.myVC = self.regVC;
self.moreVC = [SXAppDelegate initViewController:@"More" identifier:@"index" iconName:@"more" withTag:4];

DebugLog(@"Splash  %@", [SXSplashHelper splashImage]);

if ([SXUser currentUser] == nil){
    [self setRegView];
}else {
    [self setUserView];
}

self.window.rootViewController = self.tabBarController;
</code></pre>

<p>```</p>

<h2>宏</h2>

<p>有几个常用的宏可以和大家分享下：</p>

<p>Debug环境下输出Log与行号</p>

<p>```</p>

<h1>ifdef DEBUG</h1>

<h1>define DebugLog( s, &hellip; ) NSLog( @&ldquo;[FILE]%@ %<em>s [LINE]%&ndash;</em>d [METHOD]%@ %*s [MESSAGE]%@&rdquo;, [[NSString stringWithUTF8String:<strong>FILE</strong>] lastPathComponent],30 &ndash; ([[[NSString stringWithUTF8String:<strong>FILE</strong>] lastPathComponent] length]),&ldquo;&rdquo;, 5,<strong>LINE</strong>, NSStringFromSelector(<em>cmd), 75 &ndash; ([NSStringFromSelector(</em>cmd) length]),&ldquo;&rdquo;, [NSString stringWithFormat:(s), ##<strong>VA_ARGS</strong>] )</h1>

<h1>else</h1>

<h1>define DebugLog( s, &hellip; )</h1>

<p>```</p>

<p>用RGB生成UIColor</p>

<p>```</p>

<h1>define UIColorFromRGB(rgbValue) [UIColor \</h1>

<p>colorWithRed:((float)((rgbValue &amp; 0xFF0000) >> 16))/255.0 \
green:((float)((rgbValue &amp; 0xFF00) >> 8))/255.0 \
blue:((float)(rgbValue &amp; 0xFF))/255.0 alpha:1.0]
```</p>

<p>获取App版本号</p>

<p>```</p>

<h1>define APP_VERSION ([[NSBundle mainBundle] objectForInfoDictionaryKey: @&ldquo;CFBundleShortVersionString&rdquo;])</h1>

<p>```</p>

<p>判断是否是4寸Retina屏幕</p>

<p><code>
IS_IPHONE_5 ( fabs( ( double )[ [ UIScreen mainScreen ] bounds ].size.height - ( double )568 ) &lt; DBL_EPSILON )
</code></p>

<h2>让你事倍功半的开发工具</h2>

<p>我觉得有一个外接液晶屏幕很重要。。。</p>

<p>此外是一把比较好的椅子。。</p>

<p>此外，推荐大家试试<a href="http://revealapp.com/">http://revealapp.com/</a>, 一款帮你轻松调试界面的App，收费软件，有试用版本，可以免去改参数－编译－点击查看对应View－改参数－编译的麻烦流程，直接在Reveal里面修改参数就能看到对应效果</p>

<h2>iOS Developer账号的那些坑 与 提交审核</h2>

<h3>iOS Developer 账号</h3>

<p>如果希望认真学习开发iOS App，加入iOS开发者计划是必不可少的。当初为了真机调试，又是找破解Xcode的教程又是在淘宝上买开发者证书，最后还是靠亲爱的妈妈特地办了一张Visa信用卡乖乖付钱交了99美元年费。</p>

<p>但是并不是乖乖叫了钱就一番风顺了。创建一个应用，你需要在开发面板上分别配置开发者证书，应用ID，调试设备，推送证书。。。并且绑定对应调试设备和应用ID。。。推送证书还分开发设备的Sandbox环境和Production环境。。。</p>

<p>相关具体设置可以参见<a href="http://ryantang.me/blog/2013/11/28/apple-account-3/">苹果开发者账号那些事儿</a></p>

<h3>测试分发</h3>

<p>据说TestFlight很不错。。。最近被Apple收购了，我在使用过程中也感到各种不便。不过一些在应用内反馈给测试人员的特性还不错。</p>

<p>最后我发测试包用的是<a href="http://fir.im/">Fir.im</a>，感觉还不错。另外AVOS也提供了相应的功能，值得一试。</p>

<p>同时我也用一个晚上时间做了一个Android APK分发的Demo，放在 <a href="https://github.com/oa414/swan">Github</a>上，希望有空能完善。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[关于某App外包开发心得－Android篇（一）]]></title>
    <link href="http://mmclub.github.io/blog/2014/05/24/think-of-a-outsourcing-app-develpment-1/"/>
    <updated>2014-05-24T18:55:07+08:00</updated>
    <id>http://mmclub.github.io/blog/2014/05/24/think-of-a-outsourcing-app-develpment-1</id>
    <content type="html"><![CDATA[<ul>
<li>作者: 戴志强</li>
</ul>


<blockquote><p>前段时间开发了人生的第一个外包App，相对平时做的一些App，有了一定的压力，而且有了更高的要求，不仅仅要有功能上的实现，而且有了更多其他的要求，比如手机的适配，改不完的要求，以及无良android商家对android的修改，比如小米，简直无力吐槽。最后统计java代码量达到了9991行，虽然java比较繁琐，而且我们技术有限，接口以及代码复用做的不太好，但是对于我们还是一个比较大的项目，然而关于这样一个项目是怎么样生成的，希望能给到大家一点启示。</p></blockquote>

<h3>项目功能的初步建模</h3>

<blockquote><p>一个比较大的项目，不管是外包，还是自己想做的，都会有一个大概的功能框架，虽然说做出模型图片，不是程序员的任务，但是通过这次项目，我深深的认识到，一个android的原型图，至少应该派一个程序员与美工(UI设计师~)进行交流，不然他们设计出来的菜单等级，以及酷炫的风格会让你蛋疼无比，然后还会丢下一句“说这么多干什么，不就是做不出来吗？”，为了你的代码难度在你的一定掌握范围内，所以一个靠谱的任必须去和美工一起定原型图，这个非常重要，因为android是没有做到绝对的界面与代码分离，而且基本上美工不懂android布局，所以他们完全不能认识到设计出来的布局到底有多大的难度，这是我遇到的第一个坑。。。</p></blockquote>

<h3>项目功能的考究</h3>

<blockquote><p>终于解决了基本模型的问题，接下来就是功能，无论你是做什么样的软件，功能是离不开的，举个例子，“掌上南邮”我虽然没有参与做，但是看到这个软件，大家都会知道功能有哪些，比如进入界面有个天气预报，用了webservice，接下来的图书馆，用了android中http传输信息然后jsoup爬取图书馆信息，等等。对这些功能做了基本分析，可以将这些技术点分个类，较简单，难，很难，这样你的侧重点，当然还有开发中可能遇到的坑，不要小瞧这一点，一个坑可以让你白忙活一天，还有太难的地方必须有一定的规划，不然就不只是浪费时间了。</p></blockquote>

<h3>项目页面分配</h3>

<blockquote><p>这个也是一个问题，现在做android应用，人多会有，项目结合以及理解性的偏差，所以我的建议是，“能一个人做的不要两个人”，这个真的是很重要，人多力量大主要体现在搬砖，在这里人越少你的代码的统一性更能体现，而且很多的地方都在你的控制范围内，比如数据方法封装。。。但是要两个人或者更多了，这个时候<a href="https://www.github.com">github</a>,<a href="https://trello.com">trello</a>等作为团队合作的神器就来了，更重要的是分配任务时要注意尽量将粘合度比较低的界面分离出去。关于工具类以及接口的整合，我觉得可以先几个人用自己的类写，然后重构时再合到一起，或者还可以让一个比较靠谱的人去写工具类，注意要比较靠谱，因为他的速度要能跟上其他人的速度，为他们提供方法和接口。</p></blockquote>

<h3>项目工程的建立</h3>

<blockquote><p>大家终于要告别一个com.example.Hello写完全部类的时代了，一个好的工程目录可以清晰的看出这个项目的结构，一般不要以com.example中的example因为你提交你的android app到应用市场，他会读出你的包名，如果是example有的是不会接受的。</p></blockquote>

<p>举个项目目录例子：</p>

<pre><code>org.clownxiaoqiang.test
├── adapter
├── util    
├── widget
├── model     
└── ui
    ├── flash
    ├── home     
    ├── shop
    ├── me
    └── more
</code></pre>

<blockquote><p>大家看到的这个例子，分了很多的目录其实还不算标准，在ui下面有了很多，这个就是我们看到的各种界面，一个大的集合为一个，这样不同人在开发时就不会干扰，而且很有序，其实一开始工作做好了，后面的代码重构会简单很多，这里有一个个人开发的<a href="https://github.com/gonjay/rubychina4android">rubychina4android</a>android app，大家可以看下他的工程目录，学习一下。</p></blockquote>

<h3>后记</h3>

<blockquote><p>一个好的写代码习惯也是非常重要的，比如命名，减少冗余代码等，不要小瞧任何一点，同时不要受身边的人干扰，不要认为写android就会低端，如果你能在这条路上做到极致，你也是牛X的，如果再有人对你炫耀他是做底层的，你就把手机丢他脸上，让他自己写app装上去。还有，一个靠谱的包工头，简直太TM重要了。</p></blockquote>
]]></content>
  </entry>
  
</feed>
