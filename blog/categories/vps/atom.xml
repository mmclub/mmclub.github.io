<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: VPS | 南京邮电大学移动互联网俱乐部]]></title>
  <link href="http://mmclub.github.io/blog/categories/vps/atom.xml" rel="self"/>
  <link href="http://mmclub.github.io/"/>
  <updated>2014-06-15T13:21:16+08:00</updated>
  <id>http://mmclub.github.io/</id>
  <author>
    <name><![CDATA[MMClub]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[部署Django Application（一）使用CentOS + Nginx + Gunicorn + Supervisord]]></title>
    <link href="http://mmclub.github.io/blog/2014/06/08/deploy-django-application-1/"/>
    <updated>2014-06-08T10:58:53+08:00</updated>
    <id>http://mmclub.github.io/blog/2014/06/08/deploy-django-application-1</id>
    <content type="html"><![CDATA[<p>作者: 林翔宇</p>

<p>本文是去年做<a href="https://github.com/mmclub/nupter-server-v1">掌上南邮第一版服务器程序</a>的时候写的部署笔记，原来放在<a href="http://jianshu.io/p/bNJWEs">简书</a>上，时隔一年后，还收到一两个喜欢，看来还有那么一点点价值，于是就搬过来好了。</p>

<h2>初始化服务器环境</h2>

<pre><code>yum -y install vim git screen python-pip
curl -L https://github.com/robbyrussell/oh-my-    zsh/raw/master/tools/install.sh | sh
pip install virtualenvwrapper gunicorn django
mkdir /usr/local/virtualenv
mkvirtualenv python
</code></pre>

<h2>配置gunicorn服务器</h2>

<p>Gunicorn(gunicorn.org)是一个Python WSGI UNIX的HTTP服务器。，从Ruby的独角兽（Unicorn）项目移植。</p>

<p>在Django项目下建立shell脚本</p>

<pre><code>#!/bin/bash
set -e 
LOGFILE=guni.log
LOGDIR=$(dirname $LOGFILE)
NUM_WORKERS=3  # cpu core nums * 2 + 1
USER=nobody
GROUP=nogroup
# WORKER=gevent # install python gevent
ADDRESS=127.0.0.1:8000
test -d $LOGDIR || mkdir -p $LOGDIR
exec gunicorn_django -w $NUM_WORKERS --bind=$ADDRESS \
 # -k $WORKER 
  --daemon \
  --user=$USER --group=$GROUP --log-level=error \
  --log-file=$LOGFILE 2&gt;&gt;$LOGFILE
</code></pre>

<h2>安装Nginx用作反向代理与静态服务器</h2>

<ul>
<li>使用<a href="http://lnmp.org/">http://lnmp.org/</a> 安装Nginx</li>
<li>用Lnmp一键安装包带的脚本新建一个虚拟主机</li>
<li><p>更改主机的Nginx配置文件</p>

<pre><code>  server {

      listen       80;
      server_name  nuptapi.nupter.org;
      access_log   /home/wwwlogs/nuptapi.nupter.org.log;
      error_log    /home/wwwlogs/nuptapi.nupter.org.error.log;
      root /home/wwwroot/nuptapi.nupter.org;

      location  /static/ {
          alias /home/wwwroot/nuptapi.nupter.org/static/;
      }

      location  / {
          proxy_pass            http://127.0.0.1:8000;
          proxy_redirect        off;
          proxy_set_header      Host             $host;
          proxy_set_header      X-Real-IP        $remote_addr;
          proxy_set_header      X-Forwarded-For  $proxy_add_x_forwarded_for;
          client_max_body_size  10m;
      }

  }
</code></pre></li>
</ul>


<h2>用Supervisord守护进程</h2>

<ul>
<li>echo_supervisord_conf > /etc/supervisord.conf</li>
<li>vim /etc/supervisord.conf</li>
</ul>


<p>更改配置文件以下的内容</p>

<ul>
<li>chown=lxy:lxy       ; socket file uid:gid owner</li>
<li><p>[program:nuptapi]
  command=/home/wwwroot/django_helloworld/gunicorn_start.sh</p></li>
<li><p>Shell运行supervisord</p></li>
<li>同时supervisord 默认会在9001端口打开一个HTTP服务器，可以在Nginx再配置一个反向代理来远程登陆</li>
</ul>


<h2>其它</h2>

<ul>
<li>配置DNS服务器，解析域名A记录到服务器IP</li>
<li>重启Nginx</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to Install Ruby on Rails on CentOS 6.5 Using Rbenv]]></title>
    <link href="http://mmclub.github.io/blog/2014/03/30/install-ruby-on-rails-on-centos/"/>
    <updated>2014-03-30T11:11:37+08:00</updated>
    <id>http://mmclub.github.io/blog/2014/03/30/install-ruby-on-rails-on-centos</id>
    <content type="html"><![CDATA[<ul>
<li>Author: Lin Xiangyu</li>
</ul>


<h2>Introduction</h2>

<h3>Ruby on Rails</h3>

<p>Ruby on Rails is one of the most popular web development framework, it&rsquo;s build upon  Ruby Programming Language, and it&rsquo;s the hottest web development stack currently.</p>

<h3>Rbenv</h3>

<p><a href="https://github.com/sstephenson/rbenv">Rbenv</a> is a shell script tools created by <a href="http://sstephenson.us/">Sam Stephenson</a>. It&rsquo;s used for groom your app’s Ruby environment.Use rbenv can pick a Ruby version for your application and guarantee that your development environment matches production.</p>

<p>rbenv works by inserting a directory of shims at the front of your PATH:</p>

<pre><code> ~/.rbenv/shims:/usr/local/bin:/usr/bin:/bin
</code></pre>

<p>Through a process called rehashing, rbenv maintains shims in that directory to match every Ruby command across every installed version of Ruby—irb, gem, rake, rails, ruby, and so on.</p>

<h3>CentOS</h3>

<p>CentOS is derived from  Red Hat Enterprise Linux. The target users of these distributions are usually businesses, which require their systems to be running the most stable way for a long time.So we are going to use  CentOS 6.5 running our applications.</p>

<h2>Step One &ndash; Install dependencies</h2>

<p>Before, installing any package, it&rsquo;s always recommended to update package repository cache use yum.</p>

<pre><code> sudo yum update
</code></pre>

<p>Now,in order to get necessary development tools and dependencies, run the following:</p>

<pre><code> sudo yum groupinstall -y 'development tools'
 sudo yum install -y gcc-c++ glibc-headers openssl-devel readline libyaml-devel readline-devel zlib zlib-devel  sqlite-devel  
</code></pre>

<h2>Step Two &ndash; Install Rbenv and ruby-build</h2>

<p>Then we are ready to get Rbenv downloaded installed, run the following to check out rbenv into ~/.rbenv:</p>

<pre><code> git clone git://github.com/sstephenson/rbenv.git ~/.rbenv
</code></pre>

<p>Add ~/.rbenv/bin to your $PATH for access to the rbenv command-line utility:</p>

<pre><code> echo 'export PATH="$HOME/.rbenv/bin:$PATH"' &gt;&gt; ~/.bash_profile
</code></pre>

<p>Add rbenv init to your shell to enable rbenv shims and autocompletion.</p>

<pre><code> echo 'eval "$(rbenv init -)"' &gt;&gt; ~/.bash_profile
</code></pre>

<p>Ruby-build is a Rbenv plugin which provides the rbenv install command that simplifies the process of installing new Ruby versions. Install rbenv-build:</p>

<pre><code> git clone https://github.com/sstephenson/ruby-build.git ~/.rbenv/plugins/ruby-build
</code></pre>

<p>reloaded your bash_profile to enable rbenv command:</p>

<pre><code> source ~/.bash_profile
</code></pre>

<h2>Step Three &ndash; Install Ruby</h2>

<p>Install Ruby 2.1.0 and make it the default</p>

<pre><code> rbenv install 2.1.0
 rbenv rehash
 rbenv global 2.1.0
</code></pre>

<p>Now you can run:</p>

<pre><code> ruby -v
</code></pre>

<p>to verify your ruby environment has been installed successful。 It will output something like this:</p>

<pre><code> ruby 2.1.0p0 (2013-12-25 revision 44422) [x86_64-linux]
</code></pre>

<h2>Step Four &ndash; Install Nodejs</h2>

<p>Ruby on Rails need a JavaScript runtime support. It use <a href="https://github.com/sstephenson/execjs">execjs</a> gem which can automatically picks the best runtime available to evaluate your JavaScript program, then returns the result to you as a Ruby object.</p>

<p>ExecJS supports these runtimes:</p>

<ul>
<li>therubyracer &ndash; Google V8 embedded within Ruby</li>
<li>therubyrhino &ndash; Mozilla Rhino embedded within JRuby</li>
<li>Node.js</li>
<li>Apple JavaScriptCore &ndash; Included with Mac OS X</li>
<li>Microsoft Windows Script Host (JScript)</li>
</ul>


<p>So we can use therubyracer gem or  Node.js in with our CentOS and MRI Ruby. In this guide we use <a href="http://nodejs.org/">Nodejs</a> as JavaScript runtime.</p>

<p>Node.js is available from the <a href="https://fedoraproject.org/wiki/EPEL">Fedora Extra Packages for Enterprise Linux (EPEL)</a> repository.</p>

<p>Extra Packages for Enterprise Linux (or EPEL) is a Fedora Special Interest Group that creates, maintains, and manages a high quality set of additional packages for Enterprise Linux, including, but not limited to, Red Hat Enterprise Linux (RHEL), CentOS and Scientific Linux (SL), Oracle Enterprise Linux(OEL).</p>

<p>To check if you have EPEL, run</p>

<pre><code> yum repolist
</code></pre>

<p>if you don&rsquo;t see epel, install it via RPM</p>

<pre><code> rpm -Uvh http://download-i2.fedoraproject.org/pub/epel/6/i386/epel-release-6-8.noarch.rpm
</code></pre>

<p>And then run the following command to install node:</p>

<pre><code> sudo yum install nodejs --enablerepo=epel
</code></pre>

<h2>Step Four &ndash; Install Rails Gem and test it.</h2>

<p> Rails 4.0 needs RubyGems 2.0.3, so you have to update your system by using following command</p>

<pre><code> gem update --system 2.0.3
</code></pre>

<p>Now, you can install the rails gem</p>

<pre><code> gem install rails
 rbenv rehash
</code></pre>

<p>Test your rails:</p>

<pre><code> rails new projectname
 cd projectname
 rails server
</code></pre>

<p>now open your browser and open <a href="http://your-server-ip:3000,you">http://your-server-ip:3000,you</a> can find the rails project default page.</p>
]]></content>
  </entry>
  
</feed>
