<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Android | 南京邮电大学移动互联网俱乐部]]></title>
  <link href="http://mmclub.github.io/blog/categories/android/atom.xml" rel="self"/>
  <link href="http://mmclub.github.io/"/>
  <updated>2014-06-15T13:21:16+08:00</updated>
  <id>http://mmclub.github.io/</id>
  <author>
    <name><![CDATA[MMClub]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[关于某App外包开发心得－Android篇（二）]]></title>
    <link href="http://mmclub.github.io/blog/2014/06/01/think-of-a-outsourcing-app-develpment-2/"/>
    <updated>2014-06-01T20:59:40+08:00</updated>
    <id>http://mmclub.github.io/blog/2014/06/01/think-of-a-outsourcing-app-develpment-2</id>
    <content type="html"><![CDATA[<ul>
<li>作者: 王涛</li>
</ul>


<h3>项目开发心得——合作篇</h3>

<p>第一次做有规模的项目，跟之前的写些小东西相比，主要区别是：那人钱财，给人办事。但是既然是项目，我们就得以集体利益，也就是保质保量的完成东西为最终目标不是？</p>

<ol>
<li><h4>与客户交流</h4>

<ol>
<li><h5>需求明确</h5>

<ol>
<li><p>95%以上的需求要定</p></li>
<li><p>改需求 = 做重复劳动 &ndash;> 程序员最难受的事情</p></li>
</ol>
</li>
<li><h5>阶段交付</h5>

<ol>
<li><p>明确交付时间</p></li>
<li><p>阶段交付，确保和客户的需求没有大的偏差</p></li>
</ol>
</li>
</ol>
</li>
<li><h4>与UI交流</h4>

<ol>
<li><h5>设计稿要程序参与</h5>

<ol>
<li><p>设计没有代码经验，难免会做出很多让程序心碎的设计</p>

<blockquote><p>这里最好熟悉AndroidUI设计推荐风格，因为只有越符合标准，越节约体力不是？</p></blockquote></li>
<li><p>相同的功能设计的方式有很多种，有程序的参与会选出既好实现又符合需求的设计</p></li>
<li><p>各个部分的效果要讨论明确，不然程序会做画蛇添足的事</p>

<blockquote><p>例如我就把一个Item按钮写成了N个按钮，而且不只是多多了几个按钮那么简单</p></blockquote></li>
</ol>
</li>
<li><h5>简洁设计，但要完整</h5>

<ol>
<li><p>能够表达清楚叫好了，没必要太花哨</p></li>
<li><p>面面俱到，只要是不用原生的地方都要给出设计资源，这里如果设计师没能考虑周全，我们程序就要做善意的提醒了</p></li>
</ol>
</li>
<li><h5>Android多平台设计需求</h5>

<ol>
<li><p>Android最蛋疼的分辨率适配，要明确需要适配的种类，</p></li>
<li><p>这时候就需要设计师要针对各个分辨率设计包括：</p>

<ol>
<li><p>字号，这里需要说一下，建议不要设计太多种类的字号，想清楚要突出的部分，各个部分的之间的关系</p></li>
<li><p>色系，建议不要太花，定好基调，保持风格一致。</p></li>
<li><p>布局，Padding，Margin，border，corners</p></li>
<li><p>字段，要显示的内容，要明确，不然又要重复劳动，看到这四个字就浑身难受！</p></li>
</ol>
</li>
</ol>
</li>
<li><h5>图片资源交接</h5>

<ol>
<li><p><strong>发送方式</strong></p>

<ol>
<li><p>trello.com是个很好的平台，可以用来上传下载图片，很方便，便于分类管理。</p></li>
<li><p>邮件，速度快，便于保存，但不好分类管理，文件多了容易找不到。</p></li>
</ol>
</li>
<li><p><strong>文件夹命名</strong></p>

<ol>
<li><p>建议根据所属页面命名，按层级分类</p></li>
<li><p>建议用英文例如：Home_Bottom_RadioButton</p></li>
</ol>
</li>
<li><strong>文件命名</strong>

<ol>
<li><p>必须用英文，如果设计用汉字，不仅有乱码风险，而且还得挨个换成英文，累死！</p></li>
<li><p>由于大家对英文单词理解不同，最好先讨论下</p></li>
</ol>
</li>
</ol>
</li>
</ol>
</li>
<li><h4>与Web后台交流</h4>

<ol>
<li><p>API的字段要交流好。这就要建立在：需求确定 &ndash;> 设计显示内容确定 &ndash;> 程序实现方式确定 &ndash;> API的字段交流</p></li>
<li><p>API说明文档要交流，不然容易忽略重要内容</p>

<blockquote><p>有个API是数据库要用户信息，我想当然以为是GET，但其实是POST，若是Web后台有特别考虑，要特别说明，不然会出现莫名其妙的错误</p></blockquote></li>
<li><p>更新API要通知，不然会突然找不到数据。尤其是有一次被Web后台坑了，同样的字段，名字却打错了，害我调试好半天</p></li>
</ol>
</li>
<li><h4>与客户端合作者交流</h4>

<ol>
<li><p>项目开始前的计划：</p>

<ol>
<li><p><strong>项目结构：</strong></p>

<ol>
<li><p>代码：Model，Adapter，Activity，View，Utils，Constant</p></li>
<li><p>资源文件：</p>

<ol>
<li><p>定好各个色值，字号，便于调用且统一</p></li>
<li><p>为了适配，建不同分辨率的资源文件，例如</p>

<ul>
<li>values</li>
<li>values-mdpi</li>
<li>values-hdpi</li>
<li>values-xhdpi</li>
</ul>
</li>
<li><p>为了适配，要用demin</p></li>
<li><p>若控件很多且相似，可以用style让代码量减少</p></li>
</ol>
</li>
</ol>
</li>
<li><p><strong>模块划分：</strong>这次做的信息类应用，大致上以页面划分</p></li>
<li><p><strong>View：</strong>下拉菜单，Dialog，Toast，写好接口，方便使用</p></li>
<li><p><strong>Utils：</strong>应用中的某些部分可以做成工具类，文件操作，用户登录信息操作，网络连接检查等</p></li>
<li><p><strong>Constant：</strong>应用中的字符串常量</p></li>
</ol>
</li>
<li><p>开发中遇到变化</p>

<ol>
<li><p>几个人同时改动了一个类要注明，例如：//Foci Add</p></li>
<li><p>了解别人的代码，为了学习，也为了整个项目更好开发</p></li>
</ol>
</li>
</ol>
</li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[关于某App外包开发心得－Android篇（一）]]></title>
    <link href="http://mmclub.github.io/blog/2014/05/24/think-of-a-outsourcing-app-develpment-1/"/>
    <updated>2014-05-24T18:55:07+08:00</updated>
    <id>http://mmclub.github.io/blog/2014/05/24/think-of-a-outsourcing-app-develpment-1</id>
    <content type="html"><![CDATA[<ul>
<li>作者: 戴志强</li>
</ul>


<blockquote><p>前段时间开发了人生的第一个外包App，相对平时做的一些App，有了一定的压力，而且有了更高的要求，不仅仅要有功能上的实现，而且有了更多其他的要求，比如手机的适配，改不完的要求，以及无良android商家对android的修改，比如小米，简直无力吐槽。最后统计java代码量达到了9991行，虽然java比较繁琐，而且我们技术有限，接口以及代码复用做的不太好，但是对于我们还是一个比较大的项目，然而关于这样一个项目是怎么样生成的，希望能给到大家一点启示。</p></blockquote>

<h3>项目功能的初步建模</h3>

<blockquote><p>一个比较大的项目，不管是外包，还是自己想做的，都会有一个大概的功能框架，虽然说做出模型图片，不是程序员的任务，但是通过这次项目，我深深的认识到，一个android的原型图，至少应该派一个程序员与美工(UI设计师~)进行交流，不然他们设计出来的菜单等级，以及酷炫的风格会让你蛋疼无比，然后还会丢下一句“说这么多干什么，不就是做不出来吗？”，为了你的代码难度在你的一定掌握范围内，所以一个靠谱的任必须去和美工一起定原型图，这个非常重要，因为android是没有做到绝对的界面与代码分离，而且基本上美工不懂android布局，所以他们完全不能认识到设计出来的布局到底有多大的难度，这是我遇到的第一个坑。。。</p></blockquote>

<h3>项目功能的考究</h3>

<blockquote><p>终于解决了基本模型的问题，接下来就是功能，无论你是做什么样的软件，功能是离不开的，举个例子，“掌上南邮”我虽然没有参与做，但是看到这个软件，大家都会知道功能有哪些，比如进入界面有个天气预报，用了webservice，接下来的图书馆，用了android中http传输信息然后jsoup爬取图书馆信息，等等。对这些功能做了基本分析，可以将这些技术点分个类，较简单，难，很难，这样你的侧重点，当然还有开发中可能遇到的坑，不要小瞧这一点，一个坑可以让你白忙活一天，还有太难的地方必须有一定的规划，不然就不只是浪费时间了。</p></blockquote>

<h3>项目页面分配</h3>

<blockquote><p>这个也是一个问题，现在做android应用，人多会有，项目结合以及理解性的偏差，所以我的建议是，“能一个人做的不要两个人”，这个真的是很重要，人多力量大主要体现在搬砖，在这里人越少你的代码的统一性更能体现，而且很多的地方都在你的控制范围内，比如数据方法封装。。。但是要两个人或者更多了，这个时候<a href="https://www.github.com">github</a>,<a href="https://trello.com">trello</a>等作为团队合作的神器就来了，更重要的是分配任务时要注意尽量将粘合度比较低的界面分离出去。关于工具类以及接口的整合，我觉得可以先几个人用自己的类写，然后重构时再合到一起，或者还可以让一个比较靠谱的人去写工具类，注意要比较靠谱，因为他的速度要能跟上其他人的速度，为他们提供方法和接口。</p></blockquote>

<h3>项目工程的建立</h3>

<blockquote><p>大家终于要告别一个com.example.Hello写完全部类的时代了，一个好的工程目录可以清晰的看出这个项目的结构，一般不要以com.example中的example因为你提交你的android app到应用市场，他会读出你的包名，如果是example有的是不会接受的。</p></blockquote>

<p>举个项目目录例子：</p>

<pre><code>org.clownxiaoqiang.test
├── adapter
├── util    
├── widget
├── model     
└── ui
    ├── flash
    ├── home     
    ├── shop
    ├── me
    └── more
</code></pre>

<blockquote><p>大家看到的这个例子，分了很多的目录其实还不算标准，在ui下面有了很多，这个就是我们看到的各种界面，一个大的集合为一个，这样不同人在开发时就不会干扰，而且很有序，其实一开始工作做好了，后面的代码重构会简单很多，这里有一个个人开发的<a href="https://github.com/gonjay/rubychina4android">rubychina4android</a>android app，大家可以看下他的工程目录，学习一下。</p></blockquote>

<h3>后记</h3>

<blockquote><p>一个好的写代码习惯也是非常重要的，比如命名，减少冗余代码等，不要小瞧任何一点，同时不要受身边的人干扰，不要认为写android就会低端，如果你能在这条路上做到极致，你也是牛X的，如果再有人对你炫耀他是做底层的，你就把手机丢他脸上，让他自己写app装上去。还有，一个靠谱的包工头，简直太TM重要了。</p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Android入门杂谈]]></title>
    <link href="http://mmclub.github.io/blog/2014/04/03/start-learning-android/"/>
    <updated>2014-04-03T00:29:07+08:00</updated>
    <id>http://mmclub.github.io/blog/2014/04/03/start-learning-android</id>
    <content type="html"><![CDATA[<p>作者: 林翔宇</p>

<h2>入门</h2>

<h3>配置环境</h3>

<ul>
<li>请在<a href="http://www.java.com/zh_CN/">官方网站</a>下载对应的JDK包安装。注意你的系统版本是32位还是64位的，分别下载对应的版本。如果是Windows用户，请尽量按默认选项安装，Mac / Linux用户请用对应的包管理工具安装。这一步出现问题，网上会有很多解决方案。</li>
<li>去<a href="http://developer.android.com/sdk/index.html">Android官方网站</a>下载Android Studio或者ADT Bundle, 分别对应基于Intellij IDLE和Eclipese的Andorid开发IDE，解压就能使用。</li>
</ul>


<h3>学习语言</h3>

<ul>
<li>你需要学习叫Java的一门编程语言，仅需入门，明白基础概念，并能写一些非常简单的小程序就可以了</li>
<li>学到哪里足够了呢？知道<code>if</code>, <code>for</code>, <code>while</code> , 分别是用来干什么的， 知道类，对象，方法是什么东东, 最好能理解抽象类(abtract class)和接口(interface)这种奇怪的东西存在的原因～</li>
<li>书籍推荐 《Head First Java》，适合有任意一门语言基础的，知道<code>if</code>, <code>for</code>, <code>while</code> 以及函数分别是用来干什么的孩子学习。</li>
<li>你并不用十分深入的去学习Java，可以在边学Android的同时学习Java，两者的学习相辅相成。注意：如果你只是想写Android或者Java语言本身，你不必去接触J2EE那些庞大的知识体系，那些和Android基本没什么关系。</li>
<li>不想用Java写Android？当然可以。

<ul>
<li> 你可以选择一些商业的第三方游戏引擎自带支持的语言写Android程序</li>
<li> 熟悉.Net? 试试 <a href="http://xamarin.com/monoforandroid">Xamarin.Android</a></li>
<li> 熟悉Scala或者Clojure? 这些基于JVM的语言也都有对应的写Android程序的方案</li>
<li> 是一个Web开发者? <a href="http://phonegap.com/">PhoneGap</a>, <a href="http://jquerymobile.com/">Jquery Mobile</a>等相关的开源框架在朝你招手。借助HTML5的新特性与强大的基于Webkit的浏览器内核，你也可以用Web前端技术写出不错的Andorid程序。</li>
<li>但是话说回来，绝大多数Android程序还是用Java进行开发，并且用Java开发Android的资料很多很多。所以，尽量还是使用Java吧～</li>
</ul>
</li>
</ul>


<h3>Android入门</h3>

<ul>
<li>官方网站有一整套的<a href="http://developer.android.com/training/index.html">Android Tranning 入门教程</a>, 质量很高而且都是官方的最佳实践，强烈建议一看。</li>
<li>当然官方教程门槛对于0基础的初学者还是有点高，此时建议买一本书学习Android的基本概念和基本入门。毕竟有本书的感觉是不一样的。。。推荐： Apress出版社，Wrox出版社， Orelly出版社的书，国内也引进了一些翻译版本。强烈建议看国外的书，至少能保证条理清晰。</li>
</ul>


<h2>入门到初步掌握</h2>

<p>我建议按照以下步骤来</p>

<ul>
<li>学习最基本的Android概念，会写Hello World，用XML写最简单的布局。</li>
<li>找一本cookbook类型的书，也就是每一小节都带你实现一个小小的功能，让你每次都能接触到新鲜的东西，比较有成就感，而且同时巩固基础。</li>
<li>整理Android概念，比如重新回过头看看<a href="http://developer.android.com/training/index.html">Android Tranning 入门教程</a>，搞明白Activity, Service, Content Provider, Broadcast到底是什么东西，比较熟练的掌握一些常用的功能，比如按钮点击时间，对话框提醒，文件保存，网络资源获取等等。</li>
<li>开始做一些小东西，阅读大量的优秀应用的源代码，学会使用开源库， 阅读<a href="http://developer.android.com/develop/index.html">Android Developer</a>的 Training, API Guide以及 Tools。具体哪个类不明白的话，就去Reference查</li>
<li>最后说一句，这只是个人实践得出来的感觉不算差的方法，我也打算尝试以另一种方式培训0基础的有兴趣的同学，具体的方法可以自己选择，但是我强烈建议2点

<ol>
<li>生命宝贵，有限的时间应该用来约漂亮姑娘(或泡帅哥)，游玩，享受人生，而不是贪图方便看一些国内无厘头或者水分很多的资料</li>
<li>你投入的时间和你的收获正相关，只要付出努力终有回报</li>
</ol>
</li>
</ul>


<h2>资源</h2>

<p>善于利用现有的资源，善于使用第三方开源库</p>

<ul>
<li><a href="https://github.com/">Github</a>  最热门的开源分享网站，你能找到很多<a href="https://github.com/search?q=android&amp;type=Repositories&amp;s=stars">高质量的Android开源库</a></li>
<li><a href="http://www.csdn.net/article/2013-05-03/2815127-Android-open-source-projects">这里</a>有一些第三方开源库的介绍</li>
<li><a href="http://www.appdevwiki.com/wiki/show/HomePage">App Dev Wiki</a></li>
<li><a href="http://www.androidviews.net/">Android Views</a></li>
<li><a href="http://www.theultimateandroidlibrary.com/">The Ultimate Android Library</a></li>
<li>国内最大的论坛应该是<a href="http://www.eoeandroid.com/">eoe</a>, 不过内容比较水。。我偶尔也会去<a href="http://www.oschina.net/android">开源中国</a>逛逛</li>
</ul>


<p>善于在网上寻找答案</p>

<ul>
<li>请务必使用Google而不是百度</li>
<li>学会使用<a href="http://stackoverflow.com/">stackoverflow</a>, 这里有几乎所有细节问题的解决方案</li>
</ul>


<p>善于获取最新资讯</p>

<ul>
<li>关注Google/Android官方的资讯</li>
<li>订阅<a href="http://androiddevweekly.com/">AndroidDevWeekly</a>,每周会发一封最新的资讯到邮箱</li>
</ul>


<h2>发布</h2>

<h3>用户追踪，反馈与推送通知</h3>

<p>用户追踪和反馈可以自己实现客户端功能与服务器端，也可以使用第三方的服务。比如<a href="http://www.umeng.com/">友盟</a>, <a href="https://www.parse.com/">Parse</a> 等。</p>

<p>因为谷歌很多服务，包括推送通知在大陆是被封掉的，建议使用<a href="http://www.jpush.cn/">极光推送</a>,<a href="https://www.parse.com/">Parse</a>的SDK。非常不建议用后台进程轮询的方法查询，费电费流量。</p>

<h3>发布之前</h3>

<ul>
<li>记得对应用进行签名</li>
<li><a href="http://mtc.baidu.com/">百度云测试</a>，<a href="http://www.testin.cn/portal.action?op=Portal.index">云测</a>可以帮你解决众多机型的测试问题</li>
</ul>


<h3>Android市场现状</h3>

<ul>
<li>国内发布Android应用很纠结，机锋，安卓，安智，木蚂蚁，应用汇等等。没有特别的方法，多注册几个账号吧。</li>
<li>强烈建议注册Google Play开发人员，应用无需审核马上就能上架，面向全球市场。注册需要VISA/Mastercard的国际信用卡，以及一次性25美金的费用。</li>
</ul>


<h2>盈利</h2>

<p>这里只谈个人开发者或业余小团队的盈利方式</p>

<p>Android国内收费应用市场很难发展，如果做游戏等应用可以考虑应用内购买的方式。普通应用的盈利方式有</p>

<ul>
<li>广告条。收入低，但是也是一种方式。国内有各种广告商，但是个人推荐<a href="https://zhcn.admob.com">Admob</a></li>
<li>做外包项目。通过关系网接外包项目，或者上<a href="http://elance.com/">Elance</a>，<a href="http://www.freelancer.com/">Freelancer</a>, <a href="https://www.odesk.com/">Odesk</a>接国外外包项目，十分不推荐上猪八戒这些国内网站接项目，市场规范程度和收入远低于国外</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Android反编译入门与反编译防范]]></title>
    <link href="http://mmclub.github.io/blog/2014/03/02/decompile-in-android/"/>
    <updated>2014-03-02T22:04:22+08:00</updated>
    <id>http://mmclub.github.io/blog/2014/03/02/decompile-in-android</id>
    <content type="html"><![CDATA[<p>作者: 林翔宇</p>

<h2>反编译Java代码</h2>

<p>参考<a href="http://www.oschina.net/question/54100_33457">http://www.oschina.net/question/54100_33457</a></p>

<p>文中给出下载链接版本较老，其中dex2jar可能会出现java.lang.OutOfMemoryError的异常。请去官网下载两个工具的最新版。</p>

<ul>
<li><a href="https://code.google.com/p/dex2jar/">https://code.google.com/p/dex2jar/</a></li>
<li><a href="http://java.decompiler.free.fr/?q=jdgui">http://java.decompiler.free.fr/?q=jdgui</a></li>
</ul>


<p>简单来说，用dex2jar把apk文件解压得到的classes.dex转化为jar文件，然后用JD-GUI打开这个Jar文件，查看源码。</p>

<h2>反编译apk生成程序的源代码和图片、XML配置、语言资源等文件</h2>

<p>同样参考<a href="http://www.oschina.net/question/54100_33457">http://www.oschina.net/question/54100_33457</a></p>

<p>使用apktool <a href="https://code.google.com/p/android-apktool/">https://code.google.com/p/android-apktool/</a></p>

<h2>混淆代码防范反编译</h2>

<p>参考 <a href="http://blog.csdn.net/sunboy_2050/article/details/6727640">http://blog.csdn.net/sunboy_2050/article/details/6727640</a></p>

<p><em>2014.3.4更新，感谢俱乐部苏东生同学在评论区提醒</em></p>

<p>新版的SDK在创建工程目录的时候已经提供了默认的模板，将project.properties的中“# proguard.config=${sdk.dir}/tools/proguard/proguard-android.txt:proguard-project.txt”的“#”去掉，再做一些定制就可以了。可以参考</p>

<p><a href="http://blog.csdn.net/brokge/article/details/8989312">http://blog.csdn.net/brokge/article/details/8989312</a></p>

<p><del>修改Android项目下default.properties文件，加上一句proguard.config=proguard.cfg。</del></p>

<p><del>当然同时目录下要有proguard.cfg文件，可以在android_sdk_path/tools/proguard/目录下找</del></p>

<p><del>其实似乎现在Android默认创建工程的时候就已经有了。。看一下default.properties注释就可以了。。。</del></p>

<p><em>注意</em></p>

<p>参考<a href="http://my.oschina.net/banxi/blog/55622">http://my.oschina.net/banxi/blog/55622</a></p>

<ul>
<li>当使用了除了android-support-v4这些API的时候，要添加相对应的声明</li>
<li>可以让proguard帮我们忽略Log.d()这些语句</li>
</ul>


<h2>其他参考资料</h2>

<ul>
<li><a href="http://www.google.co.uk/search?hl=zh-CN&amp;newwindow=1&amp;site=&amp;source=hp&amp;q=Android++decomplier&amp;btnG=Google+%E6%90%9C%E7%B4%A2">Google搜索Android  decomplier</a></li>
<li><a href="http://stackoverflow.com/questions/1249973/decompiling-dex-into-java-sourcecode">StackOverFlow decompiling DEX into Java sourcecode</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Android测试入门(一) Activity测试简介]]></title>
    <link href="http://mmclub.github.io/blog/2014/03/02/android-test-1/"/>
    <updated>2014-03-02T21:54:03+08:00</updated>
    <id>http://mmclub.github.io/blog/2014/03/02/android-test-1</id>
    <content type="html"><![CDATA[<p>作者：林翔宇</p>

<h2>瞎扯</h2>

<p>什么是测试？试想大家写一个程序的时候，经常要手动在命令行下输入测试数据，然后看看程序的输出与实际一不一致。而在做App等UI事件众多的程序的时候，经常要手动点击按钮等控件，看看会不会有预期一样的反应。</p>

<p>大家每次都这样做，累不累呢～有什么好方法可以帮我们节约这些时间从而省出更多时间来约漂亮的女孩子呢～</p>

<p>当然有咯。我们再写一个程序，把这些步骤自动化就行咯。这个程序就是一个测试。</p>

<p>当然软件测试包含的东西很多，我们就来简单扯扯Android测试相关的内容，分几期做一个简单的入门介绍。</p>

<h2>简介</h2>

<p><a href="https://developer.android.com/tools/testing/index.html">Official Doc</a></p>

<p>Android SDK包含了强大的测试工具</p>

<ul>
<li>一个Android Test本身是一个Android Application，并且它的AndroidManifest.xml文件里面有它测试目标的信息</li>
<li>与一个Application不同，Android Test由多个测试用例组成，而不是Android components。</li>
<li>Android测试拥立扩展自JUnit TestCase类，并且可以在测试时发送触摸和键盘输入信息</li>
<li>根据不同的component (application, activity, content provider, or service)，你可以选择不同的Android test 基类</li>
<li>Eclipese/ADT, Intellij IDEA, Android Studio均提供了和Android Test的良好整合</li>
</ul>


<p>一个 Test Application包含了以下几种对于Activity相关的测试</p>

<ul>
<li>启动的初始化状态测试，比如测试一个UI控件是否成功实例化，会不会返回空指针。</li>
<li>UI测试，比如测试按钮点击出现的结果与预期比较一不一样</li>
<li>状态转移时候的测试，当一个Activity在Pause，Start等几个状态之间变换的时候，测试有的控件，变量。</li>
</ul>


<h2>新建一个测试</h2>

<p>在Intellij IDEA中，可以在项目文件下 File &ndash; New Module &ndash; Android Test Module来创建一个测试</p>

<p><img src="http://i.imgur.com/z5M4eF5.png" alt="Intellij New Test Module" /></p>

<p>Intellij IDEA会生成一个类似下面的程序结构</p>

<p>```</p>

<p>MMDailyTest
├── AndroidManifest.xml
├── MMDailyTest.iml
├── ant.properties
├── bin
├── build.xml
├── gen
│   └── org
│       └── nupter
│           └── mmdaily
│               └── tests
│                   ├── BuildConfig.java
│                   ├── Manifest.java
│                   └── R.java
├── libs
├── local.properties
├── proguard-project.txt
├── project.properties
├── res
└── src</p>

<pre><code>└── org
    └── nupter
        └── mmdaily
            ├── api
            └── ui
                └── ActivityListActivityTest.java
</code></pre>

<p>```</p>

<p>和一个Android App目录基本一致</p>

<p>来看看 AndroidManifest.xml 有什么东西</p>

<p>```xml</p>

<p>&lt;?xml version=&ldquo;1.0&rdquo; encoding=&ldquo;utf-8&rdquo;?></p>

<!-- package name must be unique so suffix with "tests" so package loader doesn't ignore us -->


<p>&lt;manifest xmlns:android=&ldquo;<a href="http://schemas.android.com/apk/res/android">http://schemas.android.com/apk/res/android</a>&rdquo;</p>

<pre><code>      package="org.nupter.mmdaily.tests"
      android:versionCode="1"
      android:versionName="1.0"&gt;
&lt;!-- We add an application tag here just so that we can indicate that
     this package needs to link against the android.test library,
     which is needed when building test cases. --&gt;
&lt;application&gt;
    &lt;uses-library android:name="android.test.runner"/&gt;
&lt;/application&gt;
&lt;!--
This declares that this application uses the instrumentation test runner targeting
the package of org.nupter.mmdaily.  To run the tests use the command:
"adb shell am instrument -w org.nupter.mmdaily.tests/android.test.InstrumentationTestRunner"
--&gt;
&lt;instrumentation android:name="android.test.InstrumentationTestRunner"
                 android:targetPackage="org.nupter.mmdaily"
                 android:label="Tests for org.nupter.mmdaily"/&gt;
</code></pre>

<p></manifest></p>

<p>```</p>

<p>默认生成的注释写得很清楚，相比普通的App的AndroidManifest.xml ，多了一个android:name=&ldquo;android.test.runner"的library依赖，以及一个instrumentation元素，制定了测试的对象的包。</p>

<h2>第一个测试类</h2>

<p>一个测试首先是一个继承自<code>android.test.ActivityInstrumentationTestCase2&lt;YOUR_ACTIVITY_CLASS&gt;</code> 的类</p>

<p>比如我们为ReadPageActivity创建一个ReadPageActivityTest.java</p>

<p>这个ReadPageActivity里面只有一个显示为返回的Button，我们测试按这个按钮的反应，以及这个按钮的文字是不是一直显示为Button</p>

<p>```java</p>

<p>package org.nupter.mmdaily.ui;</p>

<p>import android.app.Instrumentation;
import android.test.ActivityInstrumentationTestCase2;
import android.widget.Button;
import org.nupter.mmdaily.R;</p>

<p>/<em>*
 * Author: linxiangyu
 * Date:   3/2/14
 * Time:   3:24 AM
 </em>/
public class ReadPageActivityTest extends ActivityInstrumentationTestCase2<ReadPageActivity> {</p>

<pre><code>/**
 * 一个Android Activity的Example，是&lt;a href="https://developer.android.com/tools/testing/testing_android.html"&gt;官方教程的简化版&lt;/a&gt;
 */

private ReadPageActivity mActivity;
private Button mButton;


public ReadPageActivityTest() {
    super(ReadPageActivity.class);    // 整个测试开始之前构建的初始化条件。注意这个构造函数的样子，写错了运行测试的时候这个类就不会被调用了
}

@Override
public void setUp() throws Exception {
    super.setUp();       // 每个TestCase开始之前都会调用，在这里初始化一些成员变量，可以避免TestCase对变量的修改的影响

    setActivityInitialTouchMode(false); //如果你的测试要触发触摸或者键盘输入，那么必须手动关闭掉Touch Mode

    mActivity = getActivity();    // 获取activity

    mButton = (Button) mActivity.findViewById(
           R.id.ReadPageBack
    );

}

@Override
public void tearDown() throws Exception {
    super.tearDown();    // 每个TestCase结束之后都会调用
}



public void testPreConditions() {
    assertTrue(mButton != null);
} // 测试一些初始条件，比如你的UI控件不为空。


public void testBaseUI(){
    assertEquals(mButton.getText(), "返回");
    mActivity.runOnUiThread(
            new Runnable() {
                public void run() {
                    mButton.requestFocus();
                    mButton.callOnClick();
                } //
            }); // UI控件的改变必须这样运行在一个runOnUiThread 中

}  // 测试一些UI事件

public void testStatePause() {
    Instrumentation mInstr = this.getInstrumentation();
    mInstr.callActivityOnPause(mActivity);
    assertEquals(mButton.getText(), "返回");
} // 测试一些App状态转移的时候的样子
</code></pre>

<p>}</p>

<p>```</p>

<h3>运行测试</h3>

<p><img src="http://i.imgur.com/1VWC6oS.png" alt="Run Test" /></p>

<p>你会在Intellij 下面的Run窗口里面看到相关的提示，以及你的模拟器/手机迅速跳转到相应的测试Activity，然后又返回来。</p>

<p><img src="http://i.imgur.com/oTD4PMs.png" alt="Test Result" /></p>

<p>很高兴，测试一次通过，全绿。</p>

<h3>项目代码</h3>

<p><a href="https://github.com/mmclub/MMDaily/tree/23ee19d4b25889a5a112f4f6d39e4d306fc8d82b">项目的代码</a></p>

<p>这就是一个最简单的Android测试的样例了，之后我们会介绍其他Android SDK里面测试相关的东西。</p>
]]></content>
  </entry>
  
</feed>
